<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kosuke Blog</title>
    <link>https://kosukeblog.com/archives/index.xml</link>
    <description>Recent content on Kosuke Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://kosukeblog.com/archives/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GCD(Grand Central Dispatch)についてまとめ</title>
      <link>https://kosukeblog.com/2017/10/gcd/</link>
      <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/10/gcd/</guid>
      <description>

&lt;h2 id=&#34;gcd&#34;&gt;GCD&lt;/h2&gt;

&lt;p&gt;マルチスレッドを簡単に処理してくれる &lt;strong&gt;GCD&lt;/strong&gt; (Grand Central Dispatch) についてまとめてみました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;気をつける点-しないように心がける点&#34;&gt;気をつける点（しないように心がける点）&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;データ競合&lt;/strong&gt;&lt;br /&gt;
複数のスレッドから同じリソースを更新しようとしてデータの不整合が発生する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;デッドロック&lt;/strong&gt;&lt;br /&gt;
イベントを待つためのスレッドを停止する仕組みにより複数のスレッドが相互に待ち続ける&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;多数のスレッドを使用しすぎて大量のメモリを消費する&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Top --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2510862598&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;キューの種類&#34;&gt;キューの種類&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Serial Dispatch Queue&lt;/code&gt;：1つのスレッドに追加された順番に処理を実装する&lt;br /&gt;
→ 競合を起こしそうな場合は安全に用いる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Concurrent Dispatch Queue&lt;/code&gt;：複数のスレッドを使って追加された処理を実行する&lt;br /&gt;
→ 起こさない処理は平行に用いる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;例えばDBから値を取得して、それを渡すときは &lt;strong&gt;Serial Dispatch Queue&lt;/strong&gt; を&lt;br /&gt;
1つのデータにつき1つ複数のスレッドを生成して処理を実行させるとよい。&lt;/p&gt;

&lt;p&gt;ちなみに&amp;hellip;&lt;/p&gt;

&lt;p&gt;Main Dispatch Queue はメインスレッドが1つしかないので &lt;strong&gt;Serial Dispatch Queue&lt;/strong&gt; になり、&lt;br /&gt;
Global Dispatch Queue はアプリケーション全体から使用できる &lt;strong&gt;Concurrent Dispatch Queue&lt;/strong&gt; である。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;スレッド処理の順番&#34;&gt;スレッド処理の順番&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Serial&lt;/code&gt;：処理の順番は実行させてからなので順番&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Concurrent&lt;/code&gt;：一度に複数の処理を行うためバラバラ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;複数のキューからデータを更新する場合は、競合が起きる可能性があるので&lt;strong&gt;serial&lt;/strong&gt;キューを使用すべき。&lt;br /&gt;
また、いくつもの&lt;strong&gt;serial&lt;/strong&gt;キューを作って平行に処理させるのは良いが、&lt;br /&gt;
多すぎるとメモリ上の問題に直面してしまうので必要な数だけ作るべき。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;dispatch-group&#34;&gt;Dispatch Group&lt;/h4&gt;

&lt;p&gt;Dispatch Queue に追加した複数の処理が全て終了したときに終了処理を行いたいときに使用する。&lt;br /&gt;
どんな Dispatch Queue に処理が追加されていても、それら全てが終了するまで監視することができ、&lt;br /&gt;
全ての処理の実行終了を検知したら &lt;strong&gt;Dispatch Queue&lt;/strong&gt; に終了処理を追加することができるのが一番の利点である。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;同期と非同期&#34;&gt;同期と非同期&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dispatch_async&lt;/code&gt;：非同期&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;dispatch_sync&lt;/code&gt;：同期（その処理が終わるまで待つ）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;様々な処理&#34;&gt;様々な処理&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_after&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;〜秒後に処理を Dispatch Queue に追加します。&lt;br /&gt;
〜秒後に処理を実行するではなく Dispatch Queue に Block を追加するという意味なので注意しましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_barrier_async&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指定した場所までに Concurrent Dispatch Queue に追加された&lt;br /&gt;
並列に実行されているすべての処理の実行が終了してから&lt;br /&gt;
指定された処理をその Concurrent Dispatch Queue に追加する。&lt;br /&gt;
そして、&lt;strong&gt;dispatch_barrier_async&lt;/strong&gt; 関数によって追加された処理の実行が終了したら&lt;br /&gt;
通常の Concurrent Dispatch Queue の動作に戻り、&lt;br /&gt;
その Concurrent Dispatch Queue に追加されていた処理をまた並列に実行し始めることができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;例えば、読み込み処理は Concurrent Dispatch Queue で行いたいが、&lt;br /&gt;
その途中で書き出しをしようとすると、読み込んだ後でないといけない。そんな場合に使用します。&lt;/p&gt;

&lt;p&gt;使い方としては、dispatch_async 関数の代わりに&lt;br /&gt;
&lt;strong&gt;dispatch_barrier_async&lt;/strong&gt; 関数を使用するだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;例
dispatch_async(queue, reading01)
dispatch_async(queue, reading02)
dispatch_async(queue, reading03)
dispatch_barrier_async(queue, writing)
dispatch_async(queue, reading04)
dispatch_async(queue, reading05)
　　　　　　　　　　・
　　　　　　　　　　・
　　　　　　　　　　・
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これによって効率のよいデータベースアクセスやファイルアクセスを実装することができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_apply&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dispatch_sync関数やDispatch Groupに関連するAPI。&lt;br /&gt;
この関数は、指定した回数分、指定したBlockを指定した Dispatch Queue に追加し、&lt;br /&gt;
それら全ての処理を実行が終了するまで待つAPIである。&lt;br /&gt;
注意すべき点としては、dispatch_sync 関数と同様に処理の実行終了を待ってしまうので&lt;br /&gt;
dispatch_async 関数で非同期実行しながら使いましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_suspend と dispatch_resume&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;dispatch_suspend&lt;/strong&gt; は Dispatch Queue には追加されているが&lt;br /&gt;
まだ実行されていない処理をこれ以降一切実行させないときに用いる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dispatch_resume&lt;/strong&gt; は実行させるようにする際に用いる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_semaphore&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;並列に実行される処理によってデータ更新をする場合データの不整合やアプリケーションの不正終了が起こるときがあり、&lt;br /&gt;
それを回避するために Serial Dispatch Queue や dispatch_barrier_async 関数を使うことで回避できるが、&lt;br /&gt;
より粒度の細かな排他制御を行う際に用いります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_once&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指定した処理をアプリケーション実行中に一度だけしか実行されないことを証明するためのAPI。&lt;br /&gt;
マルチスレッド環境下でも、完全に安全であることが証明される。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dispatch I/O&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大きなファイルを読み込む際に、Global Dispatch Queue を使ってファイルを適度な大きさに分割して&lt;br /&gt;
平行に読むことで速く読み込めないかという際に用いる。&lt;br /&gt;
複数スレッドを使って複数並列に読み込むのが速いときもあり、&lt;br /&gt;
それを実現するのが &lt;strong&gt;Dispatch I/O&lt;/strong&gt; と &lt;strong&gt;Dispatch Data&lt;/strong&gt; である。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dispatch Source&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「kqueue」のラッパーで、Foundationフレームワークを使用するだけで使用可能（GCDの恩恵を受けられる）。&lt;/p&gt;

&lt;p&gt;例えば、DISPATCH_SOURCE_TYPE_TIMERなどを用いればネットワークプログラミングでの通信タイムアウトなどに使用できる。&lt;br /&gt;
また、Dispatch Queue では処理を追加したらキャンセルはできないが、&lt;br /&gt;
この Dispatch Queue ではキャンセルすることが可能である。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;参考書籍&#34;&gt;参考書籍&lt;/h4&gt;

&lt;p&gt;ちなみに ARCやBlocks、GCD周りはこちらの書籍が大変わかりやすく載っているのでオススメです。&lt;br /&gt;
今回の記事もこちらを参考にしました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://rcm-fe.amazon-adsystem.com/e/cm?ref=tf_til&amp;t=kosukeblog06-22&amp;m=amazon&amp;o=9&amp;p=8&amp;l=as1&amp;IS2=1&amp;detail=1&amp;asins=4844331094&amp;linkId=e4b3d393321b376cead38ec70bfa215a&amp;bc1=000000&amp;lt1=_blank&amp;fc1=4a4a4a&amp;lc1=349ef3&amp;bg1=ffffff&amp;f=ifr&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Swiftメインでコード書いてる方からすれば、今更Objective-Cの書籍？ってなりますが、&lt;br /&gt;
GCDなどについて理解を深めたい方にはもってこいの一冊なので一度参考にしてみてはいかがでしょうか。&lt;br /&gt;
今ならAmazonだとロープライス300円くらいで手に入るのでオススメです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Xcode9に上げたらまずはやっておきたい設定</title>
      <link>https://kosukeblog.com/2017/10/xcode9/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/10/xcode9/</guid>
      <description>

&lt;h3 id=&#34;jumps-to-definition&#34;&gt;Jumps to Definition&lt;/h3&gt;

&lt;p&gt;Xcode8ではキーボードのCommandを押しながら定義をクリックすると、定義元に一発で飛ぶことができたが、Xcode9では新しい機能でどんなアクションをするかメニューが開き、から&lt;code&gt;Jump to Definition&lt;/code&gt;を選択しないといけません。&lt;br /&gt;
そのため、設定を開かずワンクリックで定義元に飛ぶように戻したい際は、下記の手順で設定すればXcode8同様の動作に戻ります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Xcode&lt;/code&gt; -&amp;gt; &lt;code&gt;Preferences...&lt;/code&gt; -&amp;gt; &lt;code&gt;Navigation&lt;/code&gt; -&amp;gt; &lt;code&gt;Command-click on Code&lt;/code&gt; を &lt;code&gt;Jumps to Definition&lt;/code&gt;に設定&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ちなみにPreferencesは&lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;,&lt;/code&gt;で開くことができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;refactor&#34;&gt;Refactor&lt;/h3&gt;

&lt;p&gt;Xcode9では、ようやくリファクタリング機能が実装されました。&lt;br /&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;F&lt;/code&gt; で十分かなとは思っていたのですが、これはこれで便利な機能ですね。ショートカットを設定しておくと便利かもしれません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Editor&lt;/code&gt; -&amp;gt; &lt;code&gt;Refactor&lt;/code&gt; -&amp;gt; &lt;code&gt;Rename&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>海外旅行の事前準備まとめ</title>
      <link>https://kosukeblog.com/2017/10/travelsinlgk/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/10/travelsinlgk/</guid>
      <description>

&lt;!-- toc --&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;この記事について&#34;&gt;この記事について&lt;/h1&gt;

&lt;p&gt;先日、シンガポールとマレーシアのランカウイにバックパックで1人旅をしてきました。&lt;br /&gt;
今回の海外旅行はツアーとは違い、飛行機や宿泊先などの様々な予約、現地での予定など自分で全て計画を立てて行ってきました。&lt;br /&gt;
また、海外に1人で行くのは今回が初めてだったため、しっかり準備を行いました。&lt;br /&gt;
その際に、知っておくととても便利だなと思うことがいくつもあったので今回は技術記事ではなく、海外旅行に行くに当たって役立つ情報の共有を目的に記事を書いていきます。&lt;/p&gt;

&lt;p&gt;また、&lt;strong&gt;この記事はシンガポールとランカウイに行く前の準備に関するもの&lt;/strong&gt;なので、別の場所に行く場合は当てはまりそうなところを自らピックアップして準備を進めてもらえると良いかと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;予約&#34;&gt;予約&lt;/h1&gt;

&lt;p&gt;早ければ早いほど割引が効いたり、逆に遅いと予約で埋まってしまう&amp;hellip; なんてこともあるので&lt;br /&gt;
&lt;strong&gt;日時には十分に気をつけて&lt;/strong&gt;予約しておきましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;航空券&#34;&gt;航空券&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.tour.ne.jp/&#34;&gt;トラベルコ&lt;/a&gt;&lt;/strong&gt;：国内外の予約航空券を様々な会社から比較することが可能です。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえず日本から目的地までの航空券を買うにあたって値段や時間がどれくらいなのかを調べたい方にオススメです。&lt;br /&gt;
私はこの比較サイトを利用して、航空券の往復の値段が安い&amp;amp;現地に少しでも長くいられるベストなものを選びました。&lt;br /&gt;
その後、検索結果から各会社を選択するのですが自分の場合、楽天ポイントが貯まるからという理由で&lt;a href=&#34;https://travel.rakuten.co.jp/&#34;&gt;楽天トラベル&lt;/a&gt;にしました。&lt;br /&gt;
ちなみにシンガポールには、往復3万円くらいで行けました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.expedia.co.jp/&#34;&gt;エクスペディア&lt;/a&gt;&lt;/strong&gt; : 宿泊先とセットで航空券を予約したい方にオススメです。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は、シンガポール &amp;lt;-&amp;gt; ランカウイ　はこちらのサイトで見てから往復の航空券の予約しました。&lt;br /&gt;
会社は格安で有名なエアアジアで往復5000円くらいで行きました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.airasia.com&#34;&gt;エアアジア&lt;/a&gt;&lt;/strong&gt; : 最低限のサービスでよいので格安で飛行機に乗りたい方はチェック。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;受託手荷物は有料だが、今回のようにバックパックのみで行く場合はサイズや重量を満たして入れば機内持ち込みOK。&lt;br /&gt;
また、2週間前からウェブチェックインができるので到着後はチェックインで並ばずに&lt;br /&gt;
メールで送られてくる予約チケットを印刷しておき、当日見せるだけ or QRコードを受け取り、当日それを見せるだけ&lt;br /&gt;
なので当日は並ぶことはないので時間に余裕ができます。&lt;br /&gt;
当然チェックインの時間までに空港に行っておかなければいけないなんてことはありません。（受諾手荷物がある場合は別）&lt;/p&gt;

&lt;p&gt;エアアジアを使う際の手順や説明に関しては、&lt;a href=&#34;http://ourlifeisajourney.net/2015/12/singapore-kuala-lumpur-airasia/&#34;&gt;こちらの記事&lt;/a&gt;が非常に分かりやすかったです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;wi-fi&#34;&gt;Wi-Fi&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.imotonowifi.jp/about/&#34;&gt;イモトのWiFi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://townwifi.com/&#34;&gt;グローバル WiFi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gfcjapan.co.jp/jetfi/&#34;&gt;jetfi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回期間限定で50%OFFだったのでjetfiで予約しました。&lt;br /&gt;
また、返却は帰国の翌日までだったため日をまたいて帰国する場合、予約時に帰国日を1日早くすれば、1日分の料金を浮かせることが可能とのこと。（実際に電話で確認したところ、問題ないとおっしゃっていました）&lt;br /&gt;
ちなみに返却は、ポスト返却しか受け付けていないため650円かかりますが、空港にポストがあるのでそこに返却することができます。&lt;br /&gt;
受け取り時にレターパックをもらえるのですが、旅行前にレターパックを貰ってもバックパッカーとしては&lt;del&gt;余分な&lt;/del&gt;荷物が増えるので辛かったです（笑）&lt;br /&gt;
&lt;a href=&#34;https://www.gfcjapan.co.jp/jetfi/guide/airport.html?id=narita-airport&#34;&gt;こちら&lt;/a&gt;から空港受け取りについて見ることができるのでチェックしておきましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現地でSIMを購入&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現地にSIMを売っている機械があるので、そこで使用期間や容量、対応サイズなどを見て買うことができます。&lt;br /&gt;
SIMフリーのスマートフォンであれば、挿せばすぐに利用できて料金面も非常に安く、コスパが良いのでオススメします。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.changirecommends.com/wifi.aspx&#34;&gt;現地でWi-Fiをレンタル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;シンガポールのチャンギ空港では、予約をすれば現地でレンタルが可能です。料金も安いです。&lt;br /&gt;
メリットとしては、日本へ帰国する際に日をまたぐとその日の分も料金に含んでしまう。そのため、現地だと出発前に返却するので1日分浮く。（予約から受け取りは全て英語）
デメリットは、到着してからレンタルなので受付に行き、Wi-Fiを受け取る必要があります。そのため現地での時間が少し減ります。&lt;br /&gt;
また、英語でのコミュニケーションが必要になるので全くわからない方には敷居が高いかもしれません。&lt;/p&gt;

&lt;p&gt;ちなみにシンガポールでは、空港内に無料で利用できるパソコン（1人15分）が使えるので、困ったときは活用するといいと思います。&lt;br /&gt;
実際、到着時にそのパソコンを見かけましたが、利用している人はほとんどいませんでした。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;個人的な経験に基づいての意見ですが、自分はライトプランの1日300MBでレンタルをしましたが、1人で利用するには十分でした。&lt;br /&gt;
FaceBook, Twitter, Youtubeなどは宿泊先のWi-Fiを使うなど、必要時以外のポケットWi-Fi利用は抑えましょう。&lt;br /&gt;
そうすればGoogle MapやLINEなど普通に利用する分には容量を考えなくても大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;予約するに当たっての注意&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wi-Fiは会社によっては前日・当日はレンタルできないところもあるため飛行機の時間が決まったら早めに予約しておくと良いと思います。&lt;br /&gt;
もし、シンガポールとマレーシアへ行く予定があるのであれば、両方対応しているかなども注意して調べてから予約しましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;宿泊先&#34;&gt;宿泊先&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.airbnb.jp/&#34;&gt;Airbnb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現地に住む方に宿泊場所を借りて泊まることができるため、宿泊先にもよるが&lt;br /&gt;
現地の人との交流を楽しんだり、ホテルなどの料金よりも比較的安く泊めてもらうことができます。&lt;br /&gt;
ただし、予約した後にホストの方と連絡をとることがあるので
初めて行く場合は、値段や場所以外にアメニティーやレビューなども見てから決めて見るとよいかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.airbnb.jp/c/kosuken59&#34;&gt;こちらのクーポン&lt;/a&gt;を利用すれば通常より何千円も安く利用できるので、ぜひゲットしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;バス-東京駅-成田国際空港&#34;&gt;バス（東京駅 &amp;lt;-&amp;gt; 成田国際空港）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://betransseuser.com/&#34;&gt;THEアクセス成田&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;成田国際空港は、都心からとても離れているので運賃も時間もそれなりにかかります。&lt;br /&gt;
しかし、LCCバスを予約しておけば当日はスムーズ乗ることでき、ターミナル1~3のどこでも降りることが可能です。&lt;br /&gt;
そしてたった1000円で東京駅から乗ることができます。乗車時間も、1時間ちょっとなので大変オススメです。&lt;/p&gt;

&lt;p&gt;また、成田国際空港から東京駅まで乗る際に好きな時間に空港のバス停へ行き、その場で1000円を支払えばそのまま乗車が可能です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;お得に観光や体験ができるクーポンコード&#34;&gt;お得に観光や体験ができるクーポンコード&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.govoyagin.com/&#34;&gt;Voyagin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらはホストが旅行者のために企画したアクティビティを購入することができるサイトで、うまく活用すればとてもお得にアクティビティを楽しむことができます。&lt;br /&gt;
私は、シンガポールで行って見たかった場所の予約をこちらで行い、お得に観光をしてきました。&lt;/p&gt;

&lt;p&gt;それがこちらです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.govoyagin.com/ja/activities/singapore-marina_bay-sands-skypark-and-gardens-by-the-bay-tickets/7109&#34;&gt;25% OFF ガーデンズバイザベイ &amp;amp; マリーナベイサンズ 割引 チケット 〜マリーナベイパッケージ〜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらを利用すれば、ガーデンズ・バイ・ザ・ベイのフラワードーム、クラウド・フォレスト、スーパーツリー・グローブとマリーナ・ベイ・サンズのサンズ・スカイパークがセットで通常のチケット代金の25%OFFクーポンをゲットできます。&lt;br /&gt;
大変お得だと思います。（スーパーツリー・グローブはこのチケットのこと忘れてて料金払ったけど、それでもお得でした（笑））&lt;/p&gt;

&lt;p&gt;予約した日付から30日間好きな日に受付でコードを見せればチケットを受け取ることができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.govoyagin.com/ja/activities/singapore-lim_chu_kang-voyagin-coupon-code/8767&#34;&gt;初回予約限定の60%OFFチケット(60% OFF Voyagin Singapore Coupon Code Booking)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらを利用したところ、343円(JPY)支払うだけで、最終的には、3782円(JPY) -&amp;gt;2923円(JPY)となり、3000円くらいでガーデンズ・バイ・ザ・ベイとマリーナ・ベイ
・サンズを観光することができました。&lt;br /&gt;
このクーポンを購入すると、初めてシンガポールのアクティビティーを予約する際に使用できるクーポンコードを貰えます。（10S$ -&amp;gt; 4S$ または、2S$ -&amp;gt; 5S$）&lt;/p&gt;

&lt;p&gt;他のクーポンを予約する前に&lt;strong&gt;先にこのクーポンコードを手に入れてから&lt;/strong&gt;、適用したいものの購入画面で入手したこのクーポンコードを入力すれば、小額ですが安くなります。&lt;br /&gt;
クーポンコードの入力が予約ボタンの上にあり、コード入力欄が隠れているので入力時はパッと見で分かりませんでした。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Top --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2510862598&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;移動&#34;&gt;移動&lt;/h1&gt;

&lt;p&gt;シンガポールとランカウイで移動手段に利用したものを紹介していきます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;電車&#34;&gt;電車&lt;/h2&gt;

&lt;p&gt;シンガポールは&lt;a href=&#34;https://www.lta.gov.sg/content/ltaweb/en/public-transport/mrt-and-lrt-trains/train-system-map.html&#34;&gt;MRT&lt;/a&gt;と呼ばれる地下鉄があり、これでチャンギ空港も迷わず直接行くことができます。&lt;br /&gt;
線が東京ほどぐちゃぐちゃしていないので路線図を見ていれば迷うことはないかと思います。&lt;br /&gt;
案内も親切なのですごく簡単に利用できます。&lt;br /&gt;
初回時に切符を買う際は、券売機で目的地を入力してお金を払うとスタンダードチケットが出るのでこれを改札でかざすだけで通れます。&lt;br /&gt;
2回目以降は、券売機にチケットをおく場所があるのでそこに置くとチャージのメニューが出るのでチャージします。&lt;br /&gt;
このチケットは初回購入時に10セントのデポジットを払い購入でき、6回まで利用可能です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;バス&#34;&gt;バス&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.jp/maps/&#34;&gt;Google マップ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;おなじみですが、シンガポールのバスの乗り降りの際にも使用することができて、大変重宝しました。&lt;br /&gt;
現在地から目的地までを入力し、移動方法をバスにすると近くのバス停から目的地までのバスが後何分で到着するか、どのバス停で降りるべきかなど案内してもらえます。&lt;/p&gt;

&lt;p&gt;ちなみにシンガポールのバスは、乗車する際に乗ります という雰囲気を出しておかないとすぐに出発して乗れないこともあるので注意。&lt;br /&gt;
また、降りる際は近くになったらボタンを押して運転手に知らせる必要があるので、不安な方は行きたい場所やこの近くで降りたいという話を周りの人にしてみるとよいかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ryokoukankou.com/singapore/basic-bus.html&#34;&gt;こちらの記事&lt;/a&gt;がよくまとまっており、分かりやすかったです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;タクシー&#34;&gt;タクシー&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.uber.com/&#34;&gt;Uber&lt;/a&gt;：近くにいるタクシーを呼び、目的地まで乗せてもらうのに便利です。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;料金はクレジットカードなどを事前登録しておくと、そこから自動で引き落とされるのでぼったくりにあうこともありません。&lt;br /&gt;
また用途で価格を選ぶことができ、例えばuberPOOLなどを使えば同じ方面へ移動する同乗者とシェアすることができて、大変リーズナブルな価格で移動できます。&lt;/p&gt;

&lt;p&gt;登録前に招待コードを使うと最高1500円分の無料乗車ができるので、ぜひ使って見てください。&lt;br /&gt;
&lt;strong&gt;招待コード&lt;/strong&gt;：&lt;code&gt;f58sg9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/grab-ride-hailing-app/id647268330?mt=8&#34;&gt;Grab&lt;/a&gt;：日本では利用することができないが、東南アジアでは一般的に使われている。値段をあらかじめ知ることができ、Uberなどと比較して安いのを選ぶとよい。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ランカウイには電車やバスがないのでタクシーか徒歩での移動となります。&lt;br /&gt;
現地の観光客を狙うタクシーはぼったくりが多いらしいので、適正な値段で移動できるこちらのアプリは大変活用しました。&lt;br /&gt;
ちなみにランカウイ国際空港からチェナンビーチまでで12RM（300円くらい）でした。かなり安い。&lt;/p&gt;

&lt;p&gt;こちらのアプリの特徴としては、運転手と乗客のマッチングでタクシーを呼ぶことができるため自分の場所まできてもらうことが可能です。
使い方は簡単で、目的地を入力すると自動で近くのタクシーを検出し、そのドライバーとチャットができるようになります。&lt;br /&gt;
「今どこにいるの？」や「青色の◯◯に乗ってるよ」などとメッセージが送られてくるので、返信をして迎えにきてもらうなり探しに行くなりします。&lt;/p&gt;

&lt;p&gt;当然現地の言葉や英語でやりとりを行うため、向こうが話している内容や現在地を伝えたりなど最低限のコミュニケーションがとれないとお互い困ってしまいます。&lt;br /&gt;
私も英語が自由に話せるレベルではありませんでしたが、向こうも理解しようと話しを聞いてくれたおかげで
「昨日も今日の朝もひどい天気だったけど、今は晴れていて君はついてるね」「最近、韓国と日本の恋愛ドラマにはまってるんだけどオススメある？」「ケーブルカー乗るならこのチケットがオススメだよ」「日本の食べ物は何が有名なの？」
などと自分でもこんなに話せるとは思えなかったくらい運転手と会話を楽しみながら送ってくれました。とにかくランカウイの方々はすごくフレンドリーでした。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;持ち物&#34;&gt;持ち物&lt;/h1&gt;

&lt;p&gt;当日までにチェックしておく&lt;a href=&#34;#持ち物チェックリスト&#34;&gt;リスト&lt;/a&gt;を作ったので、これを参考に他に必要な持ち物や削れるものは削るなど決めて準備しましょう。&lt;br /&gt;
バックパックの場合、上の方にすぐ利用するもの（例えば機内グッズなど）を入れるなど工夫をして荷造りしておくと良いです。&lt;br /&gt;
あとは、お土産のスペース確保もしておきましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;持ち物チェックリスト&#34;&gt;持ち物チェックリスト&lt;/h2&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;パスポート&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;eチケット控え&lt;/strong&gt;（航空券などとまとめてクリアファイルに入れておくとよい）&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;ビザ&lt;/strong&gt;（今回は必要なかったが国によるので調べておきましょう）&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;クレジットカード&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;現金&lt;/strong&gt;（空港に行くまでのお金と現地で両替するためのお金）&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;免許証&lt;/strong&gt;（パスポート紛失時に顔写真が証明になるので念のため）&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;ガイドブック&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;スマートフォン&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;海外用変換プラグ（今回はBF・B3タイプ）、USBケーブル、バッテリー&lt;/strong&gt;（、変圧器、wi-fi）&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;腕時計&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;眼鏡、コンタクト、目薬、眼鏡またはコンタクトケース&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;服&lt;/strong&gt;（シャツ、ズボン、下着、パジャマ、上着など）&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;タオル&lt;/strong&gt;（服などと一緒に圧縮袋に入れて行くとよい）&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;洗面用具&lt;/strong&gt;（歯ブラシ、シャンプー、ボディソープなど）&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;くし、電動髭剃り&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;機内グッズ&lt;/strong&gt;（枕、スリッパ、アイマスク、耳栓など）&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;折りたたみ傘&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;ビニール袋&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;ウエットティッシュ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;薬&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;紙、ペン&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;便利な100均アイテム&#34;&gt;便利な100均アイテム&lt;/h2&gt;

&lt;p&gt;最近の100均グッズを実際に使ってみて改めて本当に素晴らしいと思いました。&lt;br /&gt;
そのため、いくつか紹介します。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cando&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;圧縮袋&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これに服やタオルを入れるだけで、バックパックの中のスペースを確保できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;広角レンズ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自撮りやインカメで写真を撮る時に視野が広く映るため、背景や周りの人物も写せるのであると便利です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ダイソー&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;エアー枕&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用時には空気いっぱいよりも少し抜いたくらいがフィットして心地よいのでオススメです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;機内用スリッパ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;巾着付きで折りたたみができるので大変便利です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アイマスク、耳栓&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現地の宿泊先などで部屋の中が明るいと寝れない可能性もあるのであると安心です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ワイヤー鍵&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;宿泊先にバックパックを置いている際など、つけておくと安心できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;持って行くと便利なアイテム&#34;&gt;持って行くと便利なアイテム&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;カーディガン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;外が暑くて室内がかなり寒い場合に大活躍します。&lt;br /&gt;
カーディガンは折り畳んで入れておけば荷物にならない上、使う時はさっと簡単に羽織ることができて便利です。&lt;br /&gt;
自分はユニクロの普通に洗濯可能なものを購入しました。&lt;br /&gt;
値段は4000円くらいで、肌触りが良いのでオススメです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;日本のお菓子、小物&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もしも現地の方と交流する機会があるなら、持って行くと喜ばれます。&lt;br /&gt;
ただし、機内持ち込みができるものかどうか注意ししましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;バックパックを選ぶ時のポイント&#34;&gt;バックパックを選ぶ時のポイント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;機内持ち込みできるか確認する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;高級感のある見た目は狙われやすいので避けた方がよい&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;チャックが背中側についていると開けられにくいのでよい&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;背負ったときに肩だけでなく腰や胸にも重さが行き渡るよう、体に固定できるベルトがついてると動きやすくなる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;背負ったときに自分の体よりもバックパックの方が細い（シルエットがスマート）と狭いところも背負ったまま通ることができる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;撥水加工などされていると急な雨でも中身が濡れずにすむ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;内ポケットがいくつかあると物を分けて入れられるので便利&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;逆に外側にポケットがたくさんあると開けられて盗られる可能性もあるので、外側はシンプルな作りがよい&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;側面にペットボトルなど入れられるポケットがあると便利&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Middle --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2239399852&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;当日までにやっておくと良いこと&#34;&gt;当日までにやっておくと良いこと&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;飛行機や宿泊先の場所など、時間や場所のメモを紙に書いておく&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;万が一、スマホが使えなくなった時のために予備で持っていると助かります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;荷物のチェックリストを作り、前日までに持ち物をチェックしておく&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#持ち物チェックリスト&#34;&gt;持ち物チェックリスト&lt;/a&gt;を見て、印刷するなりスクショするなりして忘れ物がないか確認しましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;シューズに防水スプレーをかけておく&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;スニーカーで行こうと考えている方は、現地で雨が降った時に靴が濡れてしまうと、濡れたままどこかに移動したり次の日も濡れた靴を履いたりしていると足元が気持ち悪くなると思います。&lt;br /&gt;
そんな場合は、普段使いもできる防水スプレーを買っておきましょう。&lt;/p&gt;

&lt;p&gt;私が購入したこちらの防水スプレーは、レビューを見てもらえればわかると思いますが、防水スプレーの中では機能性や値段に置いて間違いなくNo.1だと思います。&lt;br /&gt;
もちろんスニーカーだけでなく、革靴やカバンにも対応しております。&lt;br /&gt;
また、その他のECサイトで値段を確認してみたところAmazonが一番安かったのでオススメしておきます。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://rcm-fe.amazon-adsystem.com/e/cm?ref=tf_til&amp;t=kosukeblog06-22&amp;m=amazon&amp;o=9&amp;p=8&amp;l=as1&amp;IS2=1&amp;detail=1&amp;asins=B003S1MUMY&amp;linkId=820ba2fa50a1536c464480537959de5b&amp;bc1=000000&amp;lt1=_blank&amp;fc1=4a4a4a&amp;lc1=349ef3&amp;bg1=ffffff&amp;f=ifr&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;ちなみに機内にはスプレーを持って行くことができないので、出発の前日くらいにはかけておくとよいかと思います。&lt;br /&gt;
防水スプレーをかける際は、少しにおいがするので部屋の中ではなく外でかけるようにしましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;機内での暇つぶしの準備&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ガイドブックがあれば、それを見てどんなとこに行こうかなどあらかじめチェックしておくのも良いかと思います。
もしも機内モニターで映画が見れる場合、そちらを見て時間を潰すのも良いかと思います。&lt;br /&gt;
注意しておきたい点としては、機内の折りたたみ机にものを広げたりすると機内食や飲み物が来たり場合ものをどかさなければいけません。&lt;br /&gt;
そのため気軽に楽しめるスマホのオフラインゲームのインストールもしておくと良いかもしれません。&lt;br /&gt;
また、機内で映画やドラマを気軽に観たいという方にオススメなのがこの&lt;a href=&#34;https://video.unext.jp/introduction/mobile&#34;&gt;U-NEXT&lt;/a&gt;というアプリです。&lt;br /&gt;
1ヶ月間は無料で利用できるので、まずはインストールしてみるのも良いですね。&lt;br /&gt;
あらかじめオフラインで観れるようにコンテンツをダウンロードしておけば機内でも楽しむことができるのでオススメです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;スマホの設定を海外用にする&#34;&gt;スマホの設定を海外用にする&lt;/h1&gt;

&lt;p&gt;飛行機に乗る前にiPhoneの設定を海外用にしておきましょう。&lt;br /&gt;
詳しく知りたい方 &amp;amp; Androidの場合は、&lt;a href=&#34;https://m-prepare.arukikata.co.jp/1_7_4.html&#34;&gt;こちらの記事&lt;/a&gt;がまとまっていてオススメです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;以下は、iPhone(iOS11)の場合の設定です。設定アプリからの手順を書きます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;モバイルデータ通信&lt;/code&gt; をオフ
&lt;code&gt;通信のオプション&lt;/code&gt; より &lt;code&gt;4Gをオンにする&lt;/code&gt; をオフ
&lt;code&gt;ローミング&lt;/code&gt; も使用しない場合はオフにしておきましょう。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;iTunes StoreとApp Store&lt;/code&gt; -&amp;gt;  &lt;code&gt;自動ダウンロード&lt;/code&gt;の項目を全てオフにします。
&lt;code&gt;モバイルデータ通信&lt;/code&gt; もオフにしておきましょう。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定の一番上のユーザー名がある項目 から &lt;code&gt;iCloud&lt;/code&gt; → &lt;code&gt;iCloudバックアップ&lt;/code&gt; をオフ&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;基本的に以下のような設定にしておけば問題ありません。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;オン&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;機内モード&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wi-Fi&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;オフ&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;モバイルデータ通信&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自動で同期、ダウンロード、アップデートを行う設定&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;換金について&#34;&gt;換金について&lt;/h1&gt;

&lt;p&gt;今自分がシンガポールにいて、日本円をシンガポールドル(S$)に換金したいとします。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;We buy&lt;/strong&gt;：自分がこの値段払えば1S$得られる値段（安ければ安いほどよい）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;We Sell&lt;/strong&gt;：1S$を日本円に換金したときの値段（高ければ高いほどよい）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;もし、100S$換金したいのであれば、&lt;code&gt;We buy&lt;/code&gt; × &lt;code&gt;100&lt;/code&gt; の値段を日本円で支払います。&lt;br /&gt;
そうすれば、100S$換金したことになります。&lt;/p&gt;

&lt;p&gt;こちらの&lt;a href=&#34;https://www.google.co.jp/amp/ke-tabi.com/%3Fp=86&amp;amp;amp=1&#34;&gt;記事&lt;/a&gt;が分かりやすく解説しているのでチェックしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ちなみに1シンガポールドルだいたい何円になるか簡単にGoogleで調べたいときは&lt;br /&gt;
&lt;a href=&#34;https://www.google.co.jp/search?q=1sgd+to+jpy&amp;amp;oq=1sgd+to+jpy&amp;amp;aqs=chrome..69i57j0l2.214j0j1&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;&lt;code&gt;1sgd to jpy&lt;/code&gt;&lt;/a&gt; で検索します。（sgd = S$、jpy = 円）&lt;br /&gt;
そうすると 1シンガポールドル　82.7&amp;hellip;円(今現在)というように結果が出ます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;現地で注意すべき点&#34;&gt;現地で注意すべき点&lt;/h1&gt;

&lt;p&gt;しっかりとその国の法律上禁じられていることをチェックしておかないと、&lt;strong&gt;罰金や逮捕&amp;hellip;&lt;/strong&gt;なんてこともあります。&lt;br /&gt;
要チェックです。ちなみに以下は今回旅行したシンガポールで注意すべき点です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ガムを食べる・持ち込みは罰金&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ポイ捨て罰金&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;地下鉄や電車での飲食罰金&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;横断歩道のない場所での横断罰金&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;また国際線の飛行機に乗る場合は、特に持ち物などもしっかりとチェックしておきましょう。&lt;/p&gt;

&lt;p&gt;例えば、今回夜も出歩こうと考えていたので虫除けスプレーを持って行こうと思って降りました。&lt;br /&gt;
しかし、調べて見ると透明なケースに入れて持っていく必要があり、バックパックのみの機内手荷物でLCCなどを利用する場合は、機内持ち込みは出来ないので受諾手荷物として代金を支払ってから預ける必要があるそうです。&lt;br /&gt;
また、ジャムなどのお土産も同様に液体は持ち込めないため、預ける必要があるとのことでお土産のことも持ち込めるかしっかり考えておきましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;機内の乗り継ぎにも注意が必要です。&lt;br /&gt;
成田国際空港からホーチミン経由でシンガポールに行った際の話ですが、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ホーチミンの時差：東京よりも2時間遅い&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;シンガポールの時差：東京よりも1時間遅い&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なので時間の感覚がよくわからなくなり、搭乗時刻が今の時間とあっているのか不安になりました。&lt;br /&gt;
iPhoneの時計アプリで世界時計を表示させて確認したり、現地に着いたら時刻設定自体を現地に合わせるなどして対策をとると良いです。&lt;br /&gt;
搭乗時刻はチケットに現地の時間で表示されているのでしっかりと確認しておきましょう。&lt;/p&gt;

&lt;p&gt;また、シンガポールのチャンギ空港はゲートに入ってから荷物検査があるので、チェックインをして中に入ったとしても後の荷物検査があるので時間ギリギリで行くのは避けましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;覚えておくと良い英語&#34;&gt;覚えておくと良い英語&lt;/h1&gt;

&lt;p&gt;バスどのタイミングで降りたらいいんだろう、記念に写真撮ってもらいたいなあ&amp;hellip;などなど困った時に周りの人尋ねる英語をまとめておきました。&lt;br /&gt;
また、住所（Address）は日本と違い、逆から読むので注意しましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;写真を撮るとき&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Could you please take a picture of me?&lt;/code&gt;
写真撮ってもらえませんか？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Would you be in a picture with me?&lt;/code&gt;
私と一緒に写真撮りませんか？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Just press here.&lt;/code&gt;
ここを押すだけです。（カメラを渡しながら）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Would you like me to take a picture of you?&lt;/code&gt;
あなたの写真撮りましょうか？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;乗り物（バス・電車・タクシー）&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;take a train&lt;/code&gt;
電車を使う・乗る&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;transfer to ~&lt;/code&gt;
〜で乗り換える&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;get off at ~&lt;/code&gt;
〜で降りる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;I&#39;d like to go to ~, is this place OK?&lt;/code&gt;
〜に行きたいのですが、この場所であってますか？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Which do I get off for ~?&lt;/code&gt;
〜へ行くためにはどこで降りればよいですか？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Which bus do I get on?&lt;/code&gt;
どのバスに乗ればよいですか？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Can I take me to ~, please.&lt;/code&gt;
〜までお願いします。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;I&#39;m going to ~&lt;/code&gt;
〜まで行ってください。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;How long does it take to get there?&lt;/code&gt;
そこまでどれくらい（距離）かかりますか？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Can you get there at 6pm?&lt;/code&gt;
午後6時間までに着きますか？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;May I have a receipt, please?&lt;/code&gt;
レシートをいただけますか？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;May I have a taxi at ~?&lt;/code&gt;
〜に来てもらえますか？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;一人旅をするにあたって&#34;&gt;一人旅をするにあたって&lt;/h1&gt;

&lt;p&gt;ツアーとは違って、自分で全て計画を立てて行く一人旅は、終えると非常に達成感が出てきます。&lt;br /&gt;
また、次はどこに行こうかなという気持ちにさせてくれます。&lt;br /&gt;
現地の方との繋がりも生まれます。&lt;br /&gt;
そんな良い旅行にするためには、慣れないうちは準備が大事だと思うのでこちらの記事を少しでも旅行に役立ててもらえればと思います。&lt;/p&gt;

&lt;p&gt;また、事故や盗難はいつどこで遭遇するかわかりません。&lt;br /&gt;
楽しみながらもどこかに冷静さを持ち、調子に乗りすぎてしまうことだけは絶対に避けるべきです。&lt;br /&gt;
写真をお願いする場合は&lt;strong&gt;撮られる前にスマホ自体を盗られないよう&lt;/strong&gt;気をつけましょう。&lt;br /&gt;
最後はくだらないギャグで締めちゃいましたが、ここまで見てくださりありがとうございました :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Abstract Factory パターンについて</title>
      <link>https://kosukeblog.com/2017/09/abstractfactory/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/09/abstractfactory/</guid>
      <description>

&lt;h2 id=&#34;abstract-factory-パターンとは&#34;&gt;Abstract Factory パターンとは&lt;/h2&gt;

&lt;p&gt;デザインパターンの1つで、関連するオブジェクトの生成を行うクラスを抽象的にして、生成を行うためのインターフェースを提供する。&lt;/p&gt;

&lt;p&gt;インスタンスを生成するためのAPIを集約することにより、情報隠蔽や複数のモジュールの再利用を効率よく行うことが可能になる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;実装例&#34;&gt;実装例&lt;/h3&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;AbstractFactoryPattern.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;import UIKit



/// Abstract Factory パターン ----------------------------------------

/// Productクラス（製品）
protocol Doll {
    func sayHallo()
}

/// Creatorクラス（工場）
protocol Factory {
    func createInstance() -&amp;gt; Doll
}

/// ConcreteProductクラス（Japanese製品）
class JapaneseDoll: Doll {
    func sayHallo() {
        print(&amp;#34;こんにちは&amp;#34;)
    }
}

/// ConcreteProductクラス（America製品）
class AmericanDoll: Doll {
    func sayHallo() {
        print(&amp;#34;Hallo&amp;#34;)
    }
}

/// ConcreteCreatorクラス（Chinese製品）
class ChineseDoll: Doll {
    func sayHallo() {
        print(&amp;#34;你好&amp;#34;)
    }
}

/// Abstract Factory（XXのConcreteCreatorクラス（XX製品を作るXX工場）を作るFactoryメソッド）
enum Country {
    case Japan
    case America
    case China
}

enum DollFactory {
    static func create(from country: Country) -&amp;gt; Doll {
        switch country {
        case .Japan:
            return JapaneseDoll()
        case .America:
            return AmericanDoll()
        case .China:
            return ChineseDoll()
        }
    }
}



/// 呼び出す ------------------------------------------------------------

class ViewController: UIViewController {
    
    var doll: Doll { return DollFactory.create(from: .Japan) }  // 例えば .Japan を .America に変えるだけでAmericanDollのインスタンスが生成できる
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doll.sayHallo()
    }
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Abstract FactoryでDollオブジェクトをインスタンス化する役割を持つ。&lt;br /&gt;
そのため、呼び出し側で生成されるインスタンスのことを意識しなくて済む（状況が変わっても修正箇所は微量且つ呼び出す側のコードに影響がない）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swift プロトコル、デリゲートについて理解する</title>
      <link>https://kosukeblog.com/2017/09/protocol/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/09/protocol/</guid>
      <description>

&lt;p&gt;プロトコルやデリゲートの使い方などの基礎を初心にかえって勉強し直してみました。&lt;br /&gt;
Swiftのプロトコルは、Javaでいうインターフェースのことです。&lt;br /&gt;
Swiftのプロトコルだけで学ぼうとすると、少々わかりづらいかもしれないので、&lt;br /&gt;
Javaのインターフェースを先に調べてみてからだと、より理解しやすいかと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;また、本記事ではステップごとに分けて実際のプログラムで解説してきます。&lt;br /&gt;
&lt;del&gt;決して手抜き解説なわけではありません。&lt;/del&gt;&lt;/p&gt;

&lt;h5 id=&#34;step-1-1&#34;&gt;Step 1-1&lt;/h5&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;Step1_1.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;import Foundation

/// クラスがカートを持つ上で、カートに必要な要素をここで定義する
/// ちなみにプロトコルはただのお約束という意味なので
/// 必ずしもDelegateと名付ける必要はない
protocol KartDelegate {
    func setPerformance()  // 性能
    func setColor()  // 車の色
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;h5 id=&#34;step-1-2&#34;&gt;Step 1-2&lt;/h5&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;Step1_2.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;import Foundation

/// カートプロトコル
protocol KartDelegate {
    func setPerformance()  // 性能
    func setColor()  // 車の色
}

/// マリオクラスがカートを持つ
class Mario: KartDelegate {
    
    /// カートを持ったクラスは、そのカートプロトコルの中で定義した抽象メソッドを
    /// 必ず実装（implements）してあげる必要がある
    func setPerformance() {
        print(&amp;#34;☆☆☆☆☆&amp;#34;)
    }
    func setColor() {
        print(&amp;#34;Red&amp;#34;)
    }
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;h5 id=&#34;step-1-3&#34;&gt;Step 1-3&lt;/h5&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;Step1_3.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;import Foundation

/// クラスがカートを持つ上で、カートに必要な要素をここで定義する
protocol KartDelegate {
    func setPerformance()  // 性能
    func setColor()  // 車の色
}

/// マリオクラス
class Mario {
    /// どんなカートを持つかわからないがKartDelegateのプロパティを持つ
    var delegate: KartDelegate?
    
    func myKart() {
        /// まだどんなカートを持っているかわからないがここで呼び出してみる
        delegate?.setPerformance()
        delegate?.setColor()
    }
}

/// ルイージクラス
class Luigi: KartDelegate {
    
    func setPerformance() {
        print(&amp;#34;☆☆&amp;#34;)
    }
    func setColor() {
        print(&amp;#34;Green&amp;#34;)
    }
}

/// クラスのインスタンスを作る
let mario = Mario()
let luigi = Luigi()
/// ここでマリオがdelegateを通じてルイージのカートを持つ
mario.delegate = luigi
mario.myKart()  // ☆☆ Green&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;実際に使用する例&#34;&gt;実際に使用する例&lt;/h3&gt;

&lt;p&gt;iOSアプリを開発している方で、tabelViewやtextFieldなどを利用する際に&lt;br /&gt;
どこかの記事の通り書いて、知らぬ間にクラスに&lt;code&gt;~~~Delegate&lt;/code&gt;を継承して、
プロトコルの関数を使用していた、、なんて経験があるかもしれません。&lt;/p&gt;

&lt;p&gt;ここまででプロトコル等について理解できてきたなら&lt;br /&gt;
下記の例を見れば、より理解が深まるかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;step-2-1&#34;&gt;Step 2-1&lt;/h5&gt;

&lt;p&gt;
  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;Step2_1.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;import UIKit

class ViewController: UIViewController, UITextFieldDelegate {  // UITextFieldDelegateのプロトコルを継承する
    
    @IBOutlet weak var textField: UITextField!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        textField.delegate = self  // command &amp;#43; クリック で delegate の中身を見ると
                                   // weak open var delegate: UITextFieldDelegate? が定義されているのがわかる。
                                   // また、このクラス内でプロトコルの関数の中身の実装をしており、
                                   // その関数を扱いたいため self をデリゲートに指定してある。
                                   // ちなみに、定義元が optional public func ~~ のように optional が付いているものは
                                   // 必ずしもプロトコルの関数を実装（implements）する必要はない。
    }
    
    /// デリゲートをselfにしてあるので、この中にUITextFieldDelegateの関数を記述する
    /// Returnボタン後にキーボードを閉じる
    func textFieldShouldReturn(_ textField: UITextField) -&amp;gt; Bool {
        textField.resignFirstResponder()
        return true
    }
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;h5 id=&#34;step-2-2&#34;&gt;Step 2-2&lt;/h5&gt;

&lt;p&gt;
  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;Step2_2.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;/// このように外でUITextFieldDelegateを継承して、実装したプロトコルの関数を
/// デリゲートで指定してあげればViewControllerで使うこともできる。
/// しかし、この方法を用いる場合はクラスのインスタンスが破棄されると扱えなくなるので注意が必要です。

import UIKit

class ViewController: UIViewController {
    
    @IBOutlet weak var textField: UITextField!
    let vc2 = ViewController2()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        textField.delegate = vc2
    }
}

class ViewController2: UIViewController, UITextFieldDelegate {
    /// Returnボタン後にキーボードを閉じる
    func textFieldShouldReturn(_ textField: UITextField) -&amp;gt; Bool {
        textField.resignFirstResponder()
        return true
    }
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;コードを書く際に、まず動かそうと真似て書いて、&lt;br /&gt;
なんとなく理解した気になっていたことが度々ありましたが、&lt;br /&gt;
こうして改めてステップごとにわけて書いてみると自分でもより理解を深めることができました。:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer Enterprise Program を使ってアプリ配布したときのまとめ</title>
      <link>https://kosukeblog.com/2017/08/inhouse/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/08/inhouse/</guid>
      <description>

&lt;p&gt;本記事は、In-House形式によるiOSアプリの配布方法です。&lt;br /&gt;
ダウンロードできるデバイスをこちらで登録する必要なく、台数無制限でアプリを入れることが可能です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;developer-enterprise-program-配布までの流れ&#34;&gt;Developer Enterprise Program 配布までの流れ&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;①-archives&#34;&gt;① Archives&lt;/h5&gt;

&lt;p&gt;端末を Generic iOS Device にして &lt;code&gt;Product&lt;/code&gt; -&amp;gt; &lt;code&gt;Archives&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;②-ipaファイルの生成&#34;&gt;② ipaファイルの生成&lt;/h5&gt;

&lt;p&gt;Export で ipa ファイルを作る&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリの名前（Xcode側で設定したアイコン名はアプリをインストールしている時に表示される時に表示される名前）&lt;/li&gt;
&lt;li&gt;ダウンロードページからダウンロードを押した時にダウンロードされるipaファイルのURL&lt;br /&gt;
例: &lt;code&gt;https://ダウンロードページ/アプリ名.ipa&lt;/code&gt;&lt;br /&gt;
（plistファイルからこのURLを参照してダウンロードさせるのに使用）&lt;/li&gt;
&lt;li&gt;image URL ×2 (大小)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;具体例は下記に記載してある &lt;em&gt;GitHubでダウンロードページを動かす&lt;/em&gt; を参照&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/jp/documentation/IDEs/Conceptual/AppDistributionGuide/DistributingEnterpriseProgramApps/DistributingEnterpriseProgramApps.html&#34;&gt;参考URL - Apple公式ページ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;③-ダウンロードページを作る&#34;&gt;③ ダウンロードページを作る&lt;/h5&gt;

&lt;p&gt;ダウンロードボタンを押したときに手順2で生成されるplistファイルをここで読みこませる&lt;br /&gt;
例: &lt;code&gt;https://ダウンロードページ/manifest.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;例: ダウンロードページのHTML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;ダウンロードページ&amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

    &amp;lt;h1&amp;gt;ダウンロード&amp;lt;/h1&amp;gt;

    &amp;lt;img src=&amp;quot;./image/icon512.png&amp;quot; alt=&amp;quot;アプリアイコン&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;下のボタンからアプリをダウンロードしてください。&amp;lt;/p&amp;gt;

    &amp;lt;a href=&amp;quot;itms-services://?action=download-manifest&amp;amp;url=manifest.plistが置いてあるURL&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;ダウンロード&amp;lt;/a&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Export時に&lt;code&gt;ipaファイル&lt;/code&gt;と&lt;code&gt;plistファイル&lt;/code&gt;が生成されるため、&lt;br /&gt;
&lt;code&gt;itms-services://?action=download-manifest&amp;amp;url=&lt;/code&gt;の後に&lt;br /&gt;
生成したplistファイルの置いてあるURLを指定します。&lt;/p&gt;

&lt;p&gt;例: &lt;code&gt;&amp;lt;a href=&amp;quot;itms-services://?action=download-manifest&amp;amp;url=https://ユーザ名.github.io/アプリ名/download/apps/v1_0_0/manifest.plist&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;ダウンロード&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;githubでダウンロードページを動かす&#34;&gt;GitHubでダウンロードページを動かす&lt;/h5&gt;

&lt;p&gt;ページにアクセスできるようにするための具体例として、&lt;br /&gt;
GitHubでダウンロードする静的ページを作り、
同一階層にipa, plistファイルを置くという方法があります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;例: GitHub構成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;アプリ名 - download  / - apps  /  v1_0_0  /  - アプリ名.ipa
                                           - manifest.plist
                     - image /  - icon512.png
                                - icon57.png
                     - index.html
                     - style.css
       - README.md
       - .gitignore
       - LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リポジトリ内をこのようなファイル構成にしておき、&lt;br /&gt;
githubで静的サイトを作り、  URLを生成すると&lt;br /&gt;
XcodeでExportする際に必要なURLが以下のようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://ユーザ名.github.io/アプリ名/download/apps/v1_0_0/アプリ名.ipa&lt;/li&gt;
&lt;li&gt;https://ユーザ名.github.io/アプリ名/download/image/icon57.png&lt;/li&gt;
&lt;li&gt;https://ユーザ名.github.io/アプリ名/download/image/icon512.png&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これであとは、手持ちの端末からサイトにアクセスして&lt;br /&gt;
&lt;code&gt;ダウンロード完了&lt;/code&gt; -&amp;gt; &lt;code&gt;設定&lt;/code&gt; -&amp;gt; &lt;code&gt;プロファイルとデバイス管理&lt;/code&gt; を選択し、&lt;br /&gt;
エンタープライズAPPにある項目から該当するアプリ開発者を選び、&lt;code&gt;信頼&lt;/code&gt;を選択する。&lt;br /&gt;
これで、利用できるようになります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xcodeで色設定をするときの注意点</title>
      <link>https://kosukeblog.com/2017/07/color/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/07/color/</guid>
      <description>

&lt;h2 id=&#34;xcodeで色設定をするときの注意点&#34;&gt;Xcodeで色設定をするときの注意点&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;動機&#34;&gt;動機&lt;/h3&gt;

&lt;p&gt;Storyboardで設定した色とコードで書いた色の見た目が&lt;br /&gt;
Build&amp;amp;Runして確認したときに微妙に違うなあと思い、&lt;br /&gt;
調べたところ以下の設定が問題でした。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;原因と解決方法&#34;&gt;原因と解決方法&lt;/h3&gt;

&lt;p&gt;Xcode の色選択から &lt;strong&gt;RGB Sliders&lt;/strong&gt; を選択し、&lt;br /&gt;
右の歯車マークから &lt;strong&gt;Color Profile&lt;/strong&gt; で確認したところ設定が異なっていたのが原因でした。&lt;br /&gt;
そのため、自分の場合は &lt;code&gt;Generic RGB&lt;/code&gt; -&amp;gt; &lt;code&gt;sRGB&lt;/code&gt;に設定を変えて色を統一させました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;おまけ&#34;&gt;おまけ&lt;/h3&gt;

&lt;p&gt;ちなみに正確な色の値を知りたい場合は&lt;br /&gt;
こちらを使用すると見ることができます。&lt;br /&gt;
&lt;code&gt;Spotlight検索&lt;/code&gt; -&amp;gt; &lt;code&gt;Digital Color Meter&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xcode空白の設定 &#43; 小ネタ</title>
      <link>https://kosukeblog.com/2017/06/whitespace/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/06/whitespace/</guid>
      <description>

&lt;h2 id=&#34;xcodeで空白の設定をする-小ネタ&#34;&gt;Xcodeで空白の設定をする + 小ネタ&lt;/h2&gt;

&lt;p&gt;Info.plistをコードの状態にして一部修正を加えた際、空白の種類が異なってしまっていたのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Xcode -&amp;gt; Preferences&amp;hellip; -&amp;gt; Text Editing を選択&lt;br /&gt;
その中にある項目の Indentation の Prefer indent using を押すと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spaces&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tabs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の２種類が選択できる。&lt;/p&gt;

&lt;p&gt;上記の2種類からどちらかで統一し、文字をコピペし直すと自動的に空白を指定した方の設定で補ってくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;空白を目で確認する方法&#34;&gt;空白を目で確認する方法&lt;/h5&gt;

&lt;p&gt;Xcodeの上のメニューから &lt;code&gt;Editor&lt;/code&gt; -&amp;gt; &lt;code&gt;Show Invisibles&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;小ネタ&#34;&gt;小ネタ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;?w=1&lt;/code&gt;をGitHubのリンクの後ろに付けると空白の差分を除いた状態になるためレビューしやすくなります！試して見てください:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gitignoreについて</title>
      <link>https://kosukeblog.com/2017/05/gitignore/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/05/gitignore/</guid>
      <description>

&lt;h2 id=&#34;gitignore-とは&#34;&gt;.gitignore とは&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;ignore = 無視する&amp;rdquo;という意味の通り、Gitのバージョン管理の対象から外すファイル（＝無視するファイル）を .gitignore に書いておき、その設定ファイルをルートディレクトリに置いておくことで git add . などを行ったときでもそのファイルだけ自動で無視をするようになります。そのため、間違えてプッシュしてしまったといったことを回避することができます。&lt;/p&gt;

&lt;h3 id=&#34;生成の仕方&#34;&gt;生成の仕方&lt;/h3&gt;

&lt;p&gt;ターミナルで vim .gitignore を打つことによって .gitignore が生成され、vim が立ち上がります。i コマンドで insertモードに切り替え、中に対象のファイルを書き込んでいきます。（書き方については後述します）その後、escキーを押して :wq で保存&amp;amp;終了を行います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;書き方&#34;&gt;書き方&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\#&lt;/code&gt;：&lt;strong&gt;コメント&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;*.ipa&lt;/code&gt;：&lt;strong&gt;その拡張子はすべて無視したいとき&lt;/strong&gt;&lt;br /&gt;
→ .ipa のつく拡張子はすべて無視する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/test&lt;/code&gt;：&lt;strong&gt;このファイルの全てを無視する&lt;/strong&gt;&lt;br /&gt;
→ 末尾に / がない場合は test と test 以下のファイル or ディレクトリを無視する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;test/&lt;/code&gt;：&lt;strong&gt;その名前のディレクトリ全て無視される&lt;/strong&gt;&lt;br /&gt;
→ ルートディレクトリとそのサブディレクトリ内の test というディレクトリ名全てを無視する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;~~/~~/test/（~~/~~/test）&lt;/code&gt;：&lt;strong&gt;そのファイル or ディレクトリのみ無視する&lt;/strong&gt;&lt;br /&gt;
→ 最初と最後が / の時はそのファイル or ディレクトリのみを指定して無視する。この場合は test のみを無視する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;!/~~/~~/test.text&lt;/code&gt;：&lt;strong&gt;無視するのを無効にする&lt;/strong&gt;（＝そのファイルは無視しない）&lt;br /&gt;
→ 例えば * で書いてあるとき、その中の test.text は無視したくないときに使用する。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;他にも書き方がありますが、とりあえずはこのあたりを押さえておくといいと思います。
また、実際に使用する際には&lt;strong&gt;&lt;a href=&#34;https://github.com/github/gitignore&#34;&gt;ここ&lt;/a&gt;&lt;/strong&gt;から対象のもの（例えば Swift で書いているのであれば Swift.gitignore ）を見るなどして参考にするとよいと思います。&lt;br /&gt;
初めは、そのファイル自体をクローンしてリネーム（.gitignore に変更）してルートディレクトリ直下に入れておけばコンフリクトなどの回避をすることができます。
ちなみにリネームする際はターミナルから行います。（Swift.gitignore  から .gitignore  にリネームする時：&lt;code&gt;mv Swift.gitignore .gitignore&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;また、隠しフォルダをファインダーで開く際は、&lt;code&gt;command + shift + .&lt;/code&gt; で見ることが可能です！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;補足&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;GitHub上から .gitignore の設定を行う場合&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new repository で新しいリポジトリの作成時に下の方に&lt;code&gt;Add  .gitignore: None&lt;/code&gt;となっているところがあるので、そこを押して使用する言語のものを選択すれば自動で生成してくれます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gitのコマンド名を自分で設定する</title>
      <link>https://kosukeblog.com/2017/05/command/</link>
      <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/05/command/</guid>
      <description>

&lt;p&gt;Gitコマンドが長くて打つのが大変、毎回調べなきゃいけない&amp;hellip; そんなときに以下のような設定をすることによってGitのショートカットコマンドを作成することができます！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--global&lt;/code&gt; にすることで現在のユーザーを対象にした設定をすることができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;エイリアス設定&#34;&gt;エイリアス設定&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.省略したいコマンド &#39;実際のコマンド&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;例：git config --global alias.st &#39;status&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;実行時&#34;&gt;実行時&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git st
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで git status した時と同じ動作をするようになります&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;設定したエイリアス一覧表示&#34;&gt;設定したエイリアス一覧表示&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config --global --list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;設定したコマンドを削除&#34;&gt;設定したコマンドを削除&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config --global --unset alias.st
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで  git st コマンドが削除されます&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;ヘルプ表示&#34;&gt;ヘルプ表示&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;参考URLは&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;おまけ&#34;&gt;おまけ&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;今日何をしたか振り返り-１２時間前からのログ表示&#34;&gt;今日何をしたか振り返り（１２時間前からのログ表示）&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git today
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドで今日どんなコミットをしたか等振り返ることができます。&lt;/p&gt;

&lt;p&gt;設定する際はこちら↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.today &amp;quot;log --oneline --since=&#39;12 hours ago&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;ログをグラフで表示&#34;&gt;ログをグラフで表示&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git mylog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ターミナルでログをグラフにして確認する際に便利です。&lt;/p&gt;

&lt;p&gt;設定する際はこちら↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.mylog &#39;log --oneline --graph --decorate&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これでよく使うコマンドや長いコマンドの入力が楽になります。
何を設定したか確認したい時は、&lt;code&gt;--list&lt;/code&gt;を使いましょう！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;こちらの記事も合わせてどうぞ！&lt;/p&gt;

&lt;p&gt;→ &lt;a href=&#34;https://kosukeblog.com/2017/04/completion/&#34;&gt;tabキーでGitのコマンドを補完する&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>いいねやツイートボタンのURLまとめ</title>
      <link>https://kosukeblog.com/2017/05/button/</link>
      <pubDate>Sat, 06 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/05/button/</guid>
      <description>&lt;p&gt;自分のブログに、いいねや記事をシェアしてもらうためのボタンのURLをまとめました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://about.twitter.com/ja/resources/buttons#tweet&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://b.hatena.ne.jp/guide/bbutton&#34;&gt;はてブ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.facebook.com/docs/plugins/like-button?locale=ja_JP#&#34;&gt;Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/+/web/+1button/&#34;&gt;Google+&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://getpocket.com/publisher/button&#34;&gt;Pocket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://media.line.me/ja/how_to_install#lineitbutton&#34;&gt;LINE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://feedly.com/factory.html&#34;&gt;feedly&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.evernote.com/sitememory/#a_builder&#34;&gt;Evernote&lt;/a&gt;　※廃止のため、現在は &lt;a href=&#34;https://evernote.com/intl/jp/webclipper/&#34;&gt;Web Clipper&lt;/a&gt; を用いる&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.tumblr.com/buttons&#34;&gt;Tumblr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.mixi.co.jp/connect/mixi_plugin/mixi_check/spec_mixi_check/&#34;&gt;mixi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Facebookのいいねボタンは普通に配置しただけでは少し下にずれてしまうことがあるので、htmlで書く場合は&lt;/p&gt;

&lt;p&gt;&lt;code&gt;style=&amp;quot;line-height:0;&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;の記述をタグの中にすると他のボタンと同じ高さになります。&lt;/p&gt;

&lt;p&gt;また、Google+ や Pocket は右側に空白ができてしまうため、気になる場合は横幅(width)を調節してあげると良いと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHubの２段階認証後にpushできなくなった時の対処法</title>
      <link>https://kosukeblog.com/2017/05/authentication/</link>
      <pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/05/authentication/</guid>
      <description>&lt;p&gt;今回は、GitHubで２段階認証を行ったが、その後のpushができなくなってしまった際の対応方法について書いていきたいと思います。&lt;/p&gt;

&lt;p&gt;下記の様にプッシュ後にユーザ名とパスワードを求められて、入力すると&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fatal: Authentication failed for &#39;https://github.com/~~~&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;と出力されてしまいました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;この対応方法は、アクセストークンを生成する必要があります。
公式ページに従って手順通りに行えば解決できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/&#34;&gt;Creating a token&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まず、上記のURLの手順に従ってアクセストークンを発行します。
このアクセストークンはどこかにメモをしておきましょう。&lt;/p&gt;

&lt;p&gt;そして、ユーザ名とパスワードを入力する際のパスワードに先ほどのアクセストークンを入れて進めることでプッシュすることができます。&lt;/p&gt;

&lt;p&gt;ちなみに、キーチェーン等の確認をする際はこちらを参考にすると良いです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/updating-credentials-from-the-osx-keychain/&#34;&gt;Updating your credentials via Keychain Access&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CocoaPodsについて</title>
      <link>https://kosukeblog.com/2017/04/cocoapods/</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/04/cocoapods/</guid>
      <description>

&lt;h2 id=&#34;cocoapods-https-cocoapods-org&#34;&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;オープンソースなどのライブラリを使用した際にバージョン管理を行うことができるiOSライブラリ管理ツール&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;インストール&#34;&gt;インストール&lt;/h5&gt;

&lt;p&gt;CocoaPods をインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;podfileの生成&#34;&gt;Podfileの生成&lt;/h5&gt;

&lt;p&gt;Podfile が入ってない場合は、一番最初に使用したいディレクトリで以下のコマンドを入力するとPodfileが生成される
（この中にライブラリなどを追加していく）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;workspace等の生成&#34;&gt;Workspace等の生成&lt;/h5&gt;

&lt;p&gt;pod install を行うとその中に以下のファイル等が生成される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリ名.xcworkspace&lt;/li&gt;
&lt;li&gt;Podfile.lock&lt;/li&gt;
&lt;li&gt;Podsフォルダ&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;podのバージョンを更新する&#34;&gt;podのバージョンを更新する&lt;/h5&gt;

&lt;p&gt;podのバージョンをあげる際に以下のコマンドを使用する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;編集&#34;&gt;編集&lt;/h5&gt;

&lt;p&gt;バージョンの書き換えなどを行う際に使用する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi Podfile
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert danger &#34;&gt;
  &lt;p&gt;最後に &lt;strong&gt;pod install&lt;/strong&gt; をしないと反映されないので注意&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;ファイル内の確認&#34;&gt;ファイル内の確認&lt;/h5&gt;

&lt;p&gt;podファイルの中を確認する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat Podfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;古いバージョンの検出&#34;&gt;古いバージョンの検出&lt;/h5&gt;

&lt;p&gt;使用しているライブラリの中から古いバージョンを検出してくれる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod outbated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;コマンドのヘルプ&#34;&gt;コマンドのヘルプ&lt;/h5&gt;

&lt;p&gt;コマンドを忘れた際に使用する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;使用する際には アプリ名.xcworkspace を開いて、その中に使うライブラリのインポート行う必要があります。&lt;/p&gt;

&lt;p&gt;また、多数のライブラリ等がまとまった &lt;a href=&#34;https://github.com/matteocrippa/awesome-swift&#34;&gt;Awesome Swift&lt;/a&gt; はおすすめです。ここから使いたいものを探してみるといいかもしれません。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bash-completion, git-completionの導入手順</title>
      <link>https://kosukeblog.com/2017/04/completion/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/04/completion/</guid>
      <description>

&lt;p&gt;今回は、bash-completion と git-completionの導入の手順を記していきます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;bash-completion&#34;&gt;bash-completion&lt;/h2&gt;

&lt;p&gt;bash-completionとは、Bashの補完機能を拡張するシェルスクリプトのことです。&lt;/p&gt;

&lt;h5 id=&#34;インストール&#34;&gt;インストール&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$ brew install bash-completion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;viコマンドで追加する&#34;&gt;viコマンドで追加する&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;vi ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;i（インサートモードに移行）&lt;/li&gt;
&lt;li&gt;以下を追加（&lt;a href=&#34;https://github.com/scop/bash-completion&#34;&gt;参考ページ&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;escキー（インサートモードを解除）&lt;/li&gt;
&lt;li&gt;:wq（保存して終了）&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;if [ -f `brew --prefix`/etc/bash_completion ]; then
    . `brew --prefix`/etc/bash_completion
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;git-completion&#34;&gt;git-completion&lt;/h2&gt;

&lt;p&gt;git-completionとは、Gitコマンドの補完スクリプトのことです。&lt;/p&gt;

&lt;h5 id=&#34;インストール-1&#34;&gt;インストール&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/git/git/blob/master/contrib/completion/git-completion.bash&#34;&gt;ここ&lt;/a&gt;からダウンロード&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Rawを開いて中身をコピー&lt;/li&gt;
&lt;li&gt;viコマンドで貼り付け&lt;/li&gt;
&lt;li&gt;:w 名前（今回は、名前のところを git-completion.bash とする）をつけて終了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;実行する&#34;&gt;実行する&lt;/h5&gt;

&lt;p&gt;作成した git-completion.bash をどこかのフォルダにいれる&lt;/p&gt;

&lt;p&gt;（例：setting/git-completion.bash）&lt;/p&gt;

&lt;p&gt;その後は以下を入力して、指定したスクリプトファイルを実行する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/setting/git-completion.bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これでターミナルでGitコマンドなどが入力途中で Tabキー を押すことによって最後まで自動で入力されて楽になります！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>このブログについて</title>
      <link>https://kosukeblog.com/2017/03/blog/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/03/blog/</guid>
      <description>

&lt;p&gt;初めまして、&lt;a href=&#34;https://twitter.com/gt1028kn&#34;&gt;こうすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;本日ブログを開設しました。
これまで技術的なことを主に&lt;a href=&#34;http://qiita.com/KosukeQiita&#34;&gt;Qiita&lt;/a&gt;に投稿してましたが、「〜の設定、手順」や「〜を作ってみた」などは作って終わりという感じでした。
なので、その過程など自分のブログにまとめてしまえば後から見直す時に楽だし、共有もできると思い、&lt;strong&gt;今更ですが&lt;/strong&gt;作りました。（それにこれから先もっと情報量が増えるだろうなと思ったので。）&lt;/p&gt;

&lt;p&gt;後は、単に独自ドメインを取得してブログを自分で作って公開するところまでやってみたいというのもあったからです。&lt;/p&gt;

&lt;p&gt;このブログは、技術的なことを中心とするつもりですが、それ以外のことも載せていく予定です。
マイペース更新ですがよろしくお願いします！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;自己紹介&#34;&gt;自己紹介&lt;/h3&gt;

&lt;p&gt;こうすけです。名古屋の大学に通っている4年生（17年卒）です。
今年から東京の企業にエンジニアとして就職します。
まだまだ未熟ですがアプリ開発が好きです。アプリを0から作ってApp Storeで公開したりしていました&lt;a href=&#34;http://applion.jp/iphone/app/1089093474/&#34;&gt;。&lt;/a&gt;
趣味はギターで、よく息抜きにアコギを弾いて遊んでます&lt;a href=&#34;https://soundcloud.com/guitar_memo/acoustic-ver&#34;&gt;。&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;この先やってみたいこと&#34;&gt;この先やってみたいこと&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;エンターテイメントを通じて、人々の生活を豊かにするサービスやアプリケーションを形にして届けたい&lt;/li&gt;
&lt;li&gt;人をワクワクさせるものを仲間と作っていきたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これからよろしくお願いします。:)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>