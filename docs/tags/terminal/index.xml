<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terminal on Kosuke Blog</title>
    <link>https://kosukeblog.com/tags/terminal/index.xml</link>
    <description>Recent content in Terminal on Kosuke Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://kosukeblog.com/tags/terminal/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>pod install と pod update の違い</title>
      <link>https://kosukeblog.com/2018/04/podinstallandupdate/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2018/04/podinstallandupdate/</guid>
      <description>

&lt;p&gt;pod install と pod update それぞれの役割についてざっくり解説していきます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;pod-install&#34;&gt;pod install&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Podfile.lockをみて更新する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;pod-update&#34;&gt;pod update&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;SDKの今出ているバージョン（最新のブランチ）を見て、その差分があったらバージョンを更新する&lt;/li&gt;
&lt;li&gt;PodfileにSDKのバージョン指定をしているものは無視して、このバージョンから新しいのを使うなどといった指定がある場合には、そのSDKを更新する&lt;/li&gt;
&lt;li&gt;Podfile.lockが更新される（アップデートしたSDKのバージョンが更新される）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;pod-update-が終わらない方へアドバイス&#34;&gt;pod update が終わらない方へアドバイス&lt;/h4&gt;

&lt;p&gt;容量が大きいため pod update をしてもなかなか終わらない、、という方に&lt;br /&gt;
オススメなのが&lt;code&gt;outdated&lt;/code&gt; コマンドと &lt;code&gt;--verbose&lt;/code&gt; オプションです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;outdated&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;outdated&lt;/code&gt; コマンドを使うと、&lt;br /&gt;
現在使っているライブラリが古いバージョンかどうか分かります。&lt;br /&gt;
&lt;code&gt;pod update&lt;/code&gt; としてしまうと、全てのライブラリをアップデートしようとして&lt;br /&gt;
時間がかかるので、&lt;code&gt;outdated&lt;/code&gt; コマンドで古いライブラリがわかったら&lt;br /&gt;
&lt;code&gt;pod update 対象のLibrary名&lt;/code&gt; というように&lt;br /&gt;
特定のライブラリのみをアップデートするようにすると時間短縮になります。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;verbose&lt;/strong&gt;&lt;br /&gt;
アップデートに時間がかかってしまい、本当に動いているのかどうか&lt;br /&gt;
確認したいときは &lt;code&gt;pod update --verbose&lt;/code&gt; のように&lt;br /&gt;
&lt;code&gt;--verbose&lt;/code&gt;オプションを使うとアップデート中に更新している際の情報が表示されます。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;こちらの記事も合わせてどうぞ！&lt;br /&gt;
&lt;a href=&#34;https://kosukeblog.com/2017/04/cocoapods/&#34;&gt;CocoaPodsについて&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>GitHubへのアクセスエラーでpod updateできない</title>
      <link>https://kosukeblog.com/2018/02/podupdate/</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2018/02/podupdate/</guid>
      <description>

&lt;h3 id=&#34;pod-updateできない&#34;&gt;pod updateできない&lt;/h3&gt;

&lt;p&gt;最近 &lt;code&gt;pod update&lt;/code&gt; コマンドが急に効かなくなったため、&lt;br /&gt;
とりあえず&lt;code&gt;~/.cocoapods/repos/master&lt;/code&gt;を削除して入れ直してみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod repo remove master
pod setup
pod install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;それでも以下のようなエラーが出る。。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod update

[!] Failed to connect to GitHub to update the CocoaPods/Specs specs repo - Please check if you are offline, or that GitHub is down
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原因を調べて見たところこのような変更がありました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Earlier today we permanently removed support for the following weak cryptographic standards on github.com and api.github.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下のURLに詳細が載っています。
&lt;a href=&#34;https://github.com/blog/2507-weak-cryptographic-standards-removed&#34;&gt;Weak cryptographic standards removed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これらからわかったことは、デフォルトで入っているOpenSSLのバージョンが&lt;br /&gt;
今回の変更に対し、対応されていないことがわかりました。&lt;/p&gt;

&lt;p&gt;OpenSSLをアップデート後は参照させるためにRuby、またCocoaPodsも忘れず更新/インストールしましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;こちらも合わせてどうぞ！
&lt;a href=&#34;https://kosukeblog.com/2018/02/openssl/&#34;&gt;OpenSSLの更新のメモ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>OpenSSLのバージョンを更新する</title>
      <link>https://kosukeblog.com/2018/02/openssl/</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2018/02/openssl/</guid>
      <description>

&lt;p&gt;OpenSSLのバージョンを更新した際のメモです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew upgrade openssl&lt;/code&gt; -&amp;gt; openssl 1.0.2n already installed&lt;br /&gt;
&lt;code&gt;openssl version&lt;/code&gt; -&amp;gt; OpenSSL 0.9.8zh 14 Jan 2016&lt;/p&gt;

&lt;p&gt;上記からopensslの最新版のインストールはできているのに、最新ではないことがわかる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;パスをチェックする&#34;&gt;パスをチェックする&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;which openssl&lt;/code&gt; -&amp;gt; /usr/bin/openssl&lt;br /&gt;
&lt;code&gt;brew list openssl&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/Cellar/openssl/1.0.2n/.bottle/etc/ (8 files)
/usr/local/Cellar/openssl/1.0.2n/bin/c_rehash
/usr/local/Cellar/openssl/1.0.2n/bin/openssl  -&amp;gt; これ
/usr/local/Cellar/openssl/1.0.2n/include/openssl/ (75 files)
/usr/local/Cellar/openssl/1.0.2n/lib/libcrypto.1.0.0.dylib
/usr/local/Cellar/openssl/1.0.2n/lib/libssl.1.0.0.dylib
/usr/local/Cellar/openssl/1.0.2n/lib/engines/ (12 files)
/usr/local/Cellar/openssl/1.0.2n/lib/pkgconfig/ (3 files)
/usr/local/Cellar/openssl/1.0.2n/lib/ (4 other files)
/usr/local/Cellar/openssl/1.0.2n/share/man/ (1680 files)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リストから表示されている&lt;br /&gt;
&lt;code&gt;/usr/local/Cellar/openssl/1.0.2n/bin/openssl&lt;/code&gt; に&lt;br /&gt;
パスを通すために以下を入力する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo &amp;quot;export PATH=/usr/local/Cellar/openssl/1.0.2n/bin:$PATH&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;source ~/.bash_profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;パスとバージョンを確認&#34;&gt;パスとバージョンを確認&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;which openssl&lt;/code&gt; -&amp;gt; /usr/local/Cellar/openssl/1.0.2n/bin/openssl&lt;br /&gt;
&lt;code&gt;openssl version&lt;/code&gt; -&amp;gt; OpenSSL 1.0.2n  7 Dec 2017&lt;/p&gt;

&lt;p&gt;結果から最新になったことが確認できました！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;  &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gitignoreについて</title>
      <link>https://kosukeblog.com/2017/05/gitignore/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/05/gitignore/</guid>
      <description>

&lt;h2 id=&#34;gitignore-とは&#34;&gt;.gitignore とは&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;ignore = 無視する&amp;rdquo;という意味の通り、Gitのバージョン管理の対象から外すファイル（＝無視するファイル）を .gitignore に書いておき、その設定ファイルをルートディレクトリに置いておくことで git add . などを行ったときでもそのファイルだけ自動で無視をするようになります。そのため、間違えてプッシュしてしまったといったことを回避することができます。&lt;/p&gt;

&lt;h3 id=&#34;生成の仕方&#34;&gt;生成の仕方&lt;/h3&gt;

&lt;p&gt;ターミナルで vim .gitignore を打つことによって .gitignore が生成され、vim が立ち上がります。i コマンドで insertモードに切り替え、中に対象のファイルを書き込んでいきます。（書き方については後述します）その後、escキーを押して :wq で保存&amp;amp;終了を行います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Middle --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2239399852&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;書き方&#34;&gt;書き方&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\#&lt;/code&gt;：&lt;strong&gt;コメント&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;*.ipa&lt;/code&gt;：&lt;strong&gt;その拡張子はすべて無視したいとき&lt;/strong&gt;&lt;br /&gt;
→ .ipa のつく拡張子はすべて無視する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/test&lt;/code&gt;：&lt;strong&gt;このファイルの全てを無視する&lt;/strong&gt;&lt;br /&gt;
→ 末尾に / がない場合は test と test 以下のファイル or ディレクトリを無視する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;test/&lt;/code&gt;：&lt;strong&gt;その名前のディレクトリ全て無視される&lt;/strong&gt;&lt;br /&gt;
→ ルートディレクトリとそのサブディレクトリ内の test というディレクトリ名全てを無視する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;~~/~~/test/（~~/~~/test）&lt;/code&gt;：&lt;strong&gt;そのファイル or ディレクトリのみ無視する&lt;/strong&gt;&lt;br /&gt;
→ 最初と最後が / の時はそのファイル or ディレクトリのみを指定して無視する。この場合は test のみを無視する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;!/~~/~~/test.text&lt;/code&gt;：&lt;strong&gt;無視するのを無効にする&lt;/strong&gt;（＝そのファイルは無視しない）&lt;br /&gt;
→ 例えば * で書いてあるとき、その中の test.text は無視したくないときに使用する。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;他にも書き方がありますが、とりあえずはこのあたりを押さえておくといいと思います。
また、実際に使用する際には&lt;strong&gt;&lt;a href=&#34;https://github.com/github/gitignore&#34;&gt;ここ&lt;/a&gt;&lt;/strong&gt;から対象のもの（例えば Swift で書いているのであれば Swift.gitignore ）を見るなどして参考にするとよいと思います。&lt;br /&gt;
初めは、そのファイル自体をクローンしてリネーム（.gitignore に変更）してルートディレクトリ直下に入れておけばコンフリクトなどの回避をすることができます。
ちなみにリネームする際はターミナルから行います。（Swift.gitignore  から .gitignore  にリネームする時：&lt;code&gt;mv Swift.gitignore .gitignore&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;また、隠しフォルダをファインダーで開く際は、&lt;code&gt;command + shift + .&lt;/code&gt; で見ることが可能です！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;補足&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;GitHub上から .gitignore の設定を行う場合&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new repository で新しいリポジトリの作成時に下の方に&lt;code&gt;Add  .gitignore: None&lt;/code&gt;となっているところがあるので、そこを押して使用する言語のものを選択すれば自動で生成してくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Gitのコマンド名を自分で設定する</title>
      <link>https://kosukeblog.com/2017/05/command/</link>
      <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/05/command/</guid>
      <description>

&lt;p&gt;Gitコマンドが長くて打つのが大変、毎回調べなきゃいけない&amp;hellip; そんなときに以下のような設定をすることによってGitのショートカットコマンドを作成することができます！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--global&lt;/code&gt; にすることで現在のユーザーを対象にした設定をすることができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;エイリアス設定&#34;&gt;エイリアス設定&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.省略したいコマンド &#39;実際のコマンド&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;例：git config --global alias.st &#39;status&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;実行時&#34;&gt;実行時&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git st
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで git status した時と同じ動作をするようになります&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;設定したエイリアス一覧表示&#34;&gt;設定したエイリアス一覧表示&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config --global --list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;設定したコマンドを削除&#34;&gt;設定したコマンドを削除&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config --global --unset alias.st
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで  git st コマンドが削除されます&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;ヘルプ表示&#34;&gt;ヘルプ表示&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;参考URLは&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Middle --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2239399852&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;おまけ&#34;&gt;おまけ&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;今日何をしたか振り返り-１２時間前からのログ表示&#34;&gt;今日何をしたか振り返り（１２時間前からのログ表示）&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git today
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドで今日どんなコミットをしたか等振り返ることができます。&lt;/p&gt;

&lt;p&gt;設定する際はこちら↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.today &amp;quot;log --oneline --since=&#39;12 hours ago&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;ログをグラフで表示&#34;&gt;ログをグラフで表示&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git mylog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ターミナルでログをグラフにして確認する際に便利です。&lt;/p&gt;

&lt;p&gt;設定する際はこちら↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.mylog &#39;log --oneline --graph --decorate&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;また、リモートにあるブランチも全て表示したい場合は以下のような設定もしておくと便利です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git allmylog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定する際はこちら↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.allmylog &#39;log --oneline --decorate --graph --branches --tags --remotes&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これでよく使うコマンドや長いコマンドの入力が楽になります。
何を設定したか確認したい時は、&lt;code&gt;--list&lt;/code&gt;を使いましょう！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;こちらの記事も合わせてどうぞ！&lt;/p&gt;

&lt;p&gt;→ &lt;a href=&#34;https://kosukeblog.com/2017/04/completion/&#34;&gt;tabキーでGitのコマンドを補完する&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>CocoaPodsについて</title>
      <link>https://kosukeblog.com/2017/04/cocoapods/</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/04/cocoapods/</guid>
      <description>

&lt;h2 id=&#34;cocoapods-https-cocoapods-org&#34;&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;オープンソースなどのライブラリを使用した際にバージョン管理を行うことができるiOSライブラリ管理ツール&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;インストール&#34;&gt;インストール&lt;/h5&gt;

&lt;p&gt;CocoaPods をインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;podfileの生成&#34;&gt;Podfileの生成&lt;/h5&gt;

&lt;p&gt;Podfile が入ってない場合は、一番最初に使用したいディレクトリで以下のコマンドを入力するとPodfileが生成される
（この中にライブラリなどを追加していく）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;workspace等の生成&#34;&gt;Workspace等の生成&lt;/h5&gt;

&lt;p&gt;pod install を行うとその中に以下のファイル等が生成される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリ名.xcworkspace&lt;/li&gt;
&lt;li&gt;Podfile.lock&lt;/li&gt;
&lt;li&gt;Podsフォルダ&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;podのバージョンを更新する&#34;&gt;podのバージョンを更新する&lt;/h5&gt;

&lt;p&gt;podのバージョンをあげる際に以下のコマンドを使用する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;編集&#34;&gt;編集&lt;/h5&gt;

&lt;p&gt;バージョンの書き換えなどを行う際に使用する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi Podfile
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert danger &#34;&gt;
  &lt;p&gt;最後に &lt;strong&gt;pod install&lt;/strong&gt; をしないと反映されないので注意&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;ファイル内の確認&#34;&gt;ファイル内の確認&lt;/h5&gt;

&lt;p&gt;podファイルの中を確認する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat Podfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;古いバージョンの検出&#34;&gt;古いバージョンの検出&lt;/h5&gt;

&lt;p&gt;使用しているライブラリの中から古いバージョンを検出してくれる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod outbated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;コマンドのヘルプ&#34;&gt;コマンドのヘルプ&lt;/h5&gt;

&lt;p&gt;コマンドを忘れた際に使用する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;使用する際には アプリ名.xcworkspace を開いて、その中に使うライブラリのインポート行う必要があります。&lt;/p&gt;

&lt;p&gt;また、多数のライブラリ等がまとまった &lt;a href=&#34;https://github.com/matteocrippa/awesome-swift&#34;&gt;Awesome Swift&lt;/a&gt; はおすすめです。&lt;br /&gt;
ここから使いたいものを探してみるといいかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>bash-completion, git-completionの導入手順</title>
      <link>https://kosukeblog.com/2017/04/completion/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/04/completion/</guid>
      <description>

&lt;p&gt;今回は、bash-completion と git-completionの導入の手順を記していきます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Top --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2510862598&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;bash-completion&#34;&gt;bash-completion&lt;/h2&gt;

&lt;p&gt;bash-completionとは、Bashの補完機能を拡張するシェルスクリプトのことです。&lt;/p&gt;

&lt;h5 id=&#34;インストール&#34;&gt;インストール&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$ brew install bash-completion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;viコマンドで追加する&#34;&gt;viコマンドで追加する&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;vi ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;i（インサートモードに移行）&lt;/li&gt;
&lt;li&gt;以下を追加（&lt;a href=&#34;https://github.com/scop/bash-completion&#34;&gt;参考ページ&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;escキー（インサートモードを解除）&lt;/li&gt;
&lt;li&gt;:wq（保存して終了）&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;if [ -f `brew --prefix`/etc/bash_completion ]; then
    . `brew --prefix`/etc/bash_completion
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;git-completion&#34;&gt;git-completion&lt;/h2&gt;

&lt;p&gt;git-completionとは、Gitコマンドの補完スクリプトのことです。&lt;/p&gt;

&lt;h5 id=&#34;インストール-1&#34;&gt;インストール&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/git/git/blob/master/contrib/completion/git-completion.bash&#34;&gt;ここ&lt;/a&gt;からダウンロード&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Rawを開いて中身をコピー&lt;/li&gt;
&lt;li&gt;viコマンドで貼り付け&lt;/li&gt;
&lt;li&gt;:w 名前（今回は、名前のところを git-completion.bash とする）をつけて終了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;実行する&#34;&gt;実行する&lt;/h5&gt;

&lt;p&gt;作成した git-completion.bash をどこかのフォルダにいれる&lt;/p&gt;

&lt;p&gt;（例：setting/git-completion.bash）&lt;/p&gt;

&lt;p&gt;その後は以下を入力して、指定したスクリプトファイルを実行する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/setting/git-completion.bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これでターミナルでGitコマンドなどが入力途中で Tabキー を押すことによって最後まで自動で入力されて楽になります！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>