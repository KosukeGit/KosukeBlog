<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcode on Kosuke Blog</title>
    <link>https://kosukeblog.com/tags/xcode/index.xml</link>
    <description>Recent content in Xcode on Kosuke Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://kosukeblog.com/tags/xcode/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Xcodeデバッグ術まとめ</title>
      <link>https://kosukeblog.com/2018/02/debug/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2018/02/debug/</guid>
      <description>

&lt;p&gt;今回は個人的に便利だと思うデバッグの方法をまとめてみました！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;xcode-lldbコマンド&#34;&gt;Xcode lldbコマンド&lt;/h2&gt;

&lt;p&gt;ブレークポイントでプログラムを止めた際に、&lt;br /&gt;
コンソールに表示される (lldb) にコマンドを入力することができます。&lt;br /&gt;
これから紹介するコマンドを頭に入れておけば&lt;br /&gt;
素早くデバッグに取りかかることができるようになります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;p または print (プリミティブ型の変数の値を表示)&lt;/li&gt;
&lt;li&gt;po (オブジェクト型の変数の値の表示)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを知っておけば、値をちょこっと確認したい時に&lt;br /&gt;
わざわざコードにprint(~)を埋め込む必要がなくなり、&lt;br /&gt;
リアルタイムで値を見れます。&lt;/p&gt;

&lt;p&gt;また、以下のように式の評価を行うことが可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = 1
var b = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のようなプロパティがあったとします。&lt;br /&gt;
この時、aとbは同じ値かどうか知りたい場合にはlldbで以下のように入力してみると&lt;br /&gt;
デバッグ中に式の評価をすることが可能です。大変便利です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;p a == b&lt;/code&gt; -&amp;gt; falseが返ってくる&lt;br /&gt;
&lt;code&gt;p a == 1&lt;/code&gt; -&amp;gt; trueが返ってくる&lt;br /&gt;
&lt;code&gt;p b == 1&lt;/code&gt; -&amp;gt; falseが返ってくる&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;s (ステップイン)&lt;/li&gt;
&lt;li&gt;c (次のbreak point まで飛ばす)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一度入力した後は、入力し直さなくても&lt;br /&gt;
Enterボタンを押せばそのまま続けられるので便利です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;h (ヘルプ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使いたいコマンドを一覧表示することができます&lt;/p&gt;

&lt;p&gt;また、コマンドの中には&lt;br /&gt;
&lt;code&gt;br l&lt;/code&gt; でブレークポイントの一覧を表示してくれたりするものや&lt;br /&gt;
&lt;code&gt;q&lt;/code&gt; で終了させるものもあるので一度見てみるといいと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Top --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2510862598&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;filter&#34;&gt;Filter&lt;/h2&gt;

&lt;p&gt;デバッグエリアの下にあるFilterというプレースホルダーのところに&lt;br /&gt;
フィルタリングしたい文字を入力すると、デバッグで表示される全ての実行結果から&lt;br /&gt;
特定の文字のみで表示させることができるのでピンポイントで結果の値を見たい際に便利です。&lt;/p&gt;

&lt;p&gt;また、実行結果の中で &lt;code&gt;command + F&lt;/code&gt; でキーワード検索を行ってもよいですが、&lt;br /&gt;
ピンポイントでその部分だけみたい際にはこちらの方が圧倒的に便利です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;breakpoint&#34;&gt;Breakpoint&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Deactivate Breakpoints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全てのブレークポイント は &lt;code&gt;command + Y&lt;/code&gt; でオンオフできます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Edit Breakpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ブレークポイントを貼った部分から右クリックを押して &lt;code&gt;Edit Breakpoint...&lt;/code&gt; を選択します。&lt;br /&gt;
その後、Conditioinに条件を記入するとそのタイミングでブレークします。&lt;/p&gt;

&lt;p&gt;例えば下記のようなループの中のカウントがn回目になったときブレークしたい時に使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let arr = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]
for i in 0..&amp;lt;arr.count {
    print(arr[i])  // ここでブレークを貼り、i == 1 と設定すると i が 1 の時だけブレークになります。
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、逆にn回目はブレークをスルーしたい場合には、&lt;br /&gt;
ignore を設定してあげるとn回目にそこを通ったときはブレークをスルーしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exception breakpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ナビゲーターエリアの左下にある＋マーク(create a breakpoint) から
&lt;code&gt;Exception breakpoint...&lt;/code&gt; を選択しておけばクラッシュする直前でブレークしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;po $arg1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、&lt;code&gt;Exception breakpoint...&lt;/code&gt; を選択後に表示される設定の中の&lt;br /&gt;
Action から Debugger Command を選択し、&lt;code&gt;po $arg1&lt;/code&gt; を入力しておきます。&lt;br /&gt;
すると、ブレークすると同時にブレークの原因となるログを吐き出してくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;debug-view-hierarchy&#34;&gt;Debug View Hierarchy&lt;/h2&gt;

&lt;p&gt;Debug View Hierarchy は、今表示しているViewなどの階層を視覚的に見れる便利な方法です。&lt;/p&gt;

&lt;p&gt;表示の仕方は簡単で、デバッグ中に現れるデバッグエリアの上にあるボタンの中に&lt;br /&gt;
Debug View Hierarchy があるので、それを押すとXcode上で表示されます。&lt;br /&gt;
再開する際はブレークポイントで止まったのを再開させる時と同様に&lt;br /&gt;
Continue program execution を押します。&lt;/p&gt;

&lt;p&gt;階層表示中にクリックしたものがどのクラスのものか確認したり、&lt;br /&gt;
今の画面で一番上に表示しているViewは何Viewでその下のSubViewが&lt;br /&gt;
どうなっているのかなど、すぐに知りたい時に知れる便利な方法です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;built-in-identifiers&#34;&gt;Built-In Identifiers&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#file&lt;/code&gt;：ファイル名（String型）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#line&lt;/code&gt;：行数（Int型）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#column&lt;/code&gt;：文字の位置（Int型）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#function&lt;/code&gt;：関数名（String型）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;少しマイナーなデバッグ方法を紹介します。&lt;br /&gt;
これらを使い、関数などで呼ぶことで&lt;br /&gt;
その関数の行数やファイル名を表示させることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// 使い方

/// 怪しいと思う関数内でresult()を呼び出す
/// 今回は doSomething関数 が怪しいと思うので
/// ここでresult()を読んでみる。他にも怪しいと思う部分にresult()を入れる。
func doSomething() {
    /*
    何かしらの処理
        .
        .
        .
     */
    var errorMessage = &amp;quot;!!error message!!&amp;quot;
    result(message: errorMessage)  // 仮にここが50行目だとする
}


/// デバッグ用関数
/// 呼ばれた関数名がprintで表示される。
/// 今回は 50行目の doSomething() から呼ばれていることがわかった。
func result(message: String = &amp;quot;&amp;quot;, file: String = #function, line: Int = #line) {
    #if DEBUG
        print(&amp;quot;failed at \(function):\(line): \(message)&amp;quot;)
        // -&amp;gt; &amp;quot;failed at doSomething():50: !!error message!!&amp;quot;
    #endif
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://developer.apple.com/swift/blog/?id=15&#34;&gt;https://developer.apple.com/swift/blog/?id=15&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;debug-navigator&#34;&gt;Debug Navigator&lt;/h2&gt;

&lt;p&gt;デバッグ中にナビゲーターエリアの &lt;code&gt;Debug Navigator&lt;/code&gt; を押せば、&lt;br /&gt;
処理の様々な情報を見ることができます。(右から3つ目のアイコン(Xcode9にて))&lt;br /&gt;
ブレークポイントを貼っておき、ブレークで止まった際に&lt;br /&gt;
Debug Navigator を押すとその部分までの処理の流れをスレッドごとに&lt;br /&gt;
見ることができるので、大変便利だと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;よく使うものからマイナーなやり方までまとめてみました。&lt;br /&gt;
この記事を見つけて読んでくれた方が少しでも参考になったと思ってくれたら満足です :)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Xcode9に上げたらまずはやっておきたい設定</title>
      <link>https://kosukeblog.com/2017/10/xcode9/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/10/xcode9/</guid>
      <description>

&lt;h3 id=&#34;jumps-to-definition&#34;&gt;Jumps to Definition&lt;/h3&gt;

&lt;p&gt;Xcode8ではキーボードのCommandを押しながら定義をクリックすると、定義元に一発で飛ぶことができましたが、&lt;br /&gt;
Xcode9では新しい機能でどんなアクションをするかメニューが開き、から&lt;code&gt;Jump to Definition&lt;/code&gt;を選択しないといけません。&lt;br /&gt;
そのため、設定を開かずワンクリックで定義元に飛ぶように戻したい際は、下記の手順で設定すればXcode8同様の動作に戻ります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Xcode&lt;/code&gt; -&amp;gt; &lt;code&gt;Preferences...&lt;/code&gt; -&amp;gt; &lt;code&gt;Navigation&lt;/code&gt; -&amp;gt; &lt;code&gt;Command-click on Code&lt;/code&gt; を &lt;code&gt;Jumps to Definition&lt;/code&gt;に設定&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ちなみにPreferencesは&lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;,&lt;/code&gt;で開くことができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;refactor&#34;&gt;Refactor&lt;/h3&gt;

&lt;p&gt;Xcode9では、ようやくリファクタリング機能が実装されました。&lt;br /&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;F&lt;/code&gt; で十分かなとは思っていたのですが、これはこれで便利な機能ですね。ショートカットを設定しておくと便利かもしれません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Editor&lt;/code&gt; -&amp;gt; &lt;code&gt;Refactor&lt;/code&gt; -&amp;gt; &lt;code&gt;Rename&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Middle --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2239399852&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;new-build-system&#34;&gt;New Build System&lt;/h3&gt;

&lt;p&gt;ライブラリを多用していたりするとビルドに時間がかかり、&lt;br /&gt;
待ち時間が場合によってはストレスになりますよね。&lt;/p&gt;

&lt;p&gt;そんな中、Xcode9 から &lt;strong&gt;New Build System&lt;/strong&gt; という高速でビルドしてくれる機能が実装されていました。&lt;br /&gt;
この設定を行うと、ビルドがかなり早くなります。&lt;br /&gt;
安定感もあるのでビルド待ちのストレスも減少されると思います！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;設定方法はとても簡単です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Workspace Settings...&lt;/code&gt; -&amp;gt; &lt;code&gt;Build System&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Workspaceから設定画面を開いて Build System を&lt;br /&gt;
&lt;code&gt;New Build System (Preview)&lt;/code&gt; に変えるだけ！&lt;br /&gt;
（初期設定は &lt;code&gt;Standard Build System (Default)&lt;/code&gt; となっています。）&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;オープンソースの &lt;a href=&#34;https://github.com/apple/swift-llbuild&#34;&gt;llbuild&lt;/a&gt; が使われているみたいです。&lt;br /&gt;
現在はDefault設定にはなっておりませんが、今後のアップデートでデフォルトになるといいですね。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;今後も快適なコーディングライフを送りたいですね:)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Developer Enterprise Program を使ってアプリ配布したときのまとめ</title>
      <link>https://kosukeblog.com/2017/08/inhouse/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/08/inhouse/</guid>
      <description>

&lt;p&gt;本記事は、In-House形式によるiOSアプリの配布方法です。&lt;br /&gt;
ダウンロードできるデバイスをこちらで登録する必要なく、台数無制限でアプリを入れることが可能です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Top --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2510862598&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;developer-enterprise-program-配布までの流れ&#34;&gt;Developer Enterprise Program 配布までの流れ&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;①-archives&#34;&gt;① Archives&lt;/h5&gt;

&lt;p&gt;端末を Generic iOS Device にして &lt;code&gt;Product&lt;/code&gt; -&amp;gt; &lt;code&gt;Archives&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;②-ipaファイルの生成&#34;&gt;② ipaファイルの生成&lt;/h5&gt;

&lt;p&gt;Export で ipa ファイルを作る&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリの名前（Xcode側で設定したアイコン名はアプリをインストールしている時に表示される時に表示される名前）&lt;/li&gt;
&lt;li&gt;ダウンロードページからダウンロードを押した時にダウンロードされるipaファイルのURL&lt;br /&gt;
例: &lt;code&gt;https://ダウンロードページ/アプリ名.ipa&lt;/code&gt;&lt;br /&gt;
（plistファイルからこのURLを参照してダウンロードさせるのに使用）&lt;/li&gt;
&lt;li&gt;image URL ×2 (大小)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;具体例は下記に記載してある &lt;em&gt;GitHubでダウンロードページを動かす&lt;/em&gt; を参照&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/jp/documentation/IDEs/Conceptual/AppDistributionGuide/DistributingEnterpriseProgramApps/DistributingEnterpriseProgramApps.html&#34;&gt;参考URL - Apple公式ページ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;③-ダウンロードページを作る&#34;&gt;③ ダウンロードページを作る&lt;/h5&gt;

&lt;p&gt;ダウンロードボタンを押したときに手順2で生成されるplistファイルをここで読みこませる&lt;br /&gt;
例: &lt;code&gt;https://ダウンロードページ/manifest.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;例: ダウンロードページのHTML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;ダウンロードページ&amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

    &amp;lt;h1&amp;gt;ダウンロード&amp;lt;/h1&amp;gt;

    &amp;lt;img src=&amp;quot;./image/icon512.png&amp;quot; alt=&amp;quot;アプリアイコン&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;下のボタンからアプリをダウンロードしてください。&amp;lt;/p&amp;gt;

    &amp;lt;a href=&amp;quot;itms-services://?action=download-manifest&amp;amp;url=manifest.plistが置いてあるURL&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;ダウンロード&amp;lt;/a&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Export時に&lt;code&gt;ipaファイル&lt;/code&gt;と&lt;code&gt;plistファイル&lt;/code&gt;が生成されるため、&lt;br /&gt;
&lt;code&gt;itms-services://?action=download-manifest&amp;amp;url=&lt;/code&gt;の後に&lt;br /&gt;
生成したplistファイルの置いてあるURLを指定します。&lt;/p&gt;

&lt;p&gt;例: &lt;code&gt;&amp;lt;a href=&amp;quot;itms-services://?action=download-manifest&amp;amp;url=https://ユーザ名.github.io/アプリ名/download/apps/v1_0_0/manifest.plist&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;ダウンロード&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;githubでダウンロードページを動かす&#34;&gt;GitHubでダウンロードページを動かす&lt;/h5&gt;

&lt;p&gt;ページにアクセスできるようにするための具体例として、&lt;br /&gt;
GitHubでダウンロードする静的ページを作り、
同一階層にipa, plistファイルを置くという方法があります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;例: GitHub構成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;アプリ名 - download  / - apps  /  v1_0_0  /  - アプリ名.ipa
                                           - manifest.plist
                     - image /  - icon512.png
                                - icon57.png
                     - index.html
                     - style.css
       - README.md
       - .gitignore
       - LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リポジトリ内をこのようなファイル構成にしておき、&lt;br /&gt;
githubで静的サイトを作り、  URLを生成すると&lt;br /&gt;
XcodeでExportする際に必要なURLが以下のようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://ユーザ名.github.io/アプリ名/download/apps/v1_0_0/アプリ名.ipa&lt;/li&gt;
&lt;li&gt;https://ユーザ名.github.io/アプリ名/download/image/icon57.png&lt;/li&gt;
&lt;li&gt;https://ユーザ名.github.io/アプリ名/download/image/icon512.png&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これであとは、手持ちの端末からサイトにアクセスして&lt;br /&gt;
&lt;code&gt;ダウンロード完了&lt;/code&gt; -&amp;gt; &lt;code&gt;設定&lt;/code&gt; -&amp;gt; &lt;code&gt;プロファイルとデバイス管理&lt;/code&gt; を選択し、&lt;br /&gt;
エンタープライズAPPにある項目から該当するアプリ開発者を選び、&lt;code&gt;信頼&lt;/code&gt;を選択する。&lt;br /&gt;
これで、利用できるようになります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Xcodeで色設定をするときの注意点</title>
      <link>https://kosukeblog.com/2017/07/color/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/07/color/</guid>
      <description>

&lt;h2 id=&#34;xcodeで色設定をするときの注意点&#34;&gt;Xcodeで色設定をするときの注意点&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;動機&#34;&gt;動機&lt;/h3&gt;

&lt;p&gt;Storyboardで設定した色とコードで書いた色の見た目が&lt;br /&gt;
Build&amp;amp;Runして確認したときに微妙に違うなあと思い、&lt;br /&gt;
調べたところ以下の設定が問題でした。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;原因と解決方法&#34;&gt;原因と解決方法&lt;/h3&gt;

&lt;p&gt;Xcode の色選択から &lt;strong&gt;RGB Sliders&lt;/strong&gt; を選択し、&lt;br /&gt;
右の歯車マークから &lt;strong&gt;Color Profile&lt;/strong&gt; で確認したところ設定が異なっていたのが原因でした。&lt;br /&gt;
そのため、自分の場合は &lt;code&gt;Generic RGB&lt;/code&gt; -&amp;gt; &lt;code&gt;sRGB&lt;/code&gt;に設定を変えて色を統一させました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;おまけ&#34;&gt;おまけ&lt;/h3&gt;

&lt;p&gt;ちなみに正確な色の値を知りたい場合は&lt;br /&gt;
こちらを使用すると見ることができます。&lt;br /&gt;
&lt;code&gt;Spotlight検索&lt;/code&gt; -&amp;gt; &lt;code&gt;Digital Color Meter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Xcode空白の設定 &#43; 小ネタ</title>
      <link>https://kosukeblog.com/2017/06/whitespace/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/06/whitespace/</guid>
      <description>

&lt;h2 id=&#34;xcodeで空白の設定をする-小ネタ&#34;&gt;Xcodeで空白の設定をする + 小ネタ&lt;/h2&gt;

&lt;p&gt;Info.plistをコードの状態にして一部修正を加えた際、空白の種類が異なってしまっていたのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Xcode -&amp;gt; Preferences&amp;hellip; -&amp;gt; Text Editing を選択&lt;br /&gt;
その中にある項目の Indentation の Prefer indent using を押すと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spaces&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tabs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の２種類が選択できる。&lt;/p&gt;

&lt;p&gt;上記の2種類からどちらかで統一し、文字をコピペし直すと自動的に空白を指定した方の設定で補ってくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;空白を目で確認する方法&#34;&gt;空白を目で確認する方法&lt;/h5&gt;

&lt;p&gt;Xcodeの上のメニューから &lt;code&gt;Editor&lt;/code&gt; -&amp;gt; &lt;code&gt;Show Invisibles&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;小ネタ&#34;&gt;小ネタ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;?w=1&lt;/code&gt;をGitHubのリンクの後ろに付けると空白の差分を除いた状態になるためレビューしやすくなります！試して見てください:)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>