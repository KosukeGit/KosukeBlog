<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Kosuke Blog</title>
    <link>https://kosukeblog.com/tags/swift/index.xml</link>
    <description>Recent content in Swift on Kosuke Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://kosukeblog.com/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【Swift】for と forEach の書き方メモ</title>
      <link>https://kosukeblog.com/2018/05/forforeach/</link>
      <pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2018/05/forforeach/</guid>
      <description>&lt;p&gt;forEachばかり使っていたらforの書き方を忘れてしまったので簡単にメモしました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in 0..&amp;lt;10 {
    print(i)  // 0~9
}

for i in (0..&amp;lt;10).reversed() {
    print(i)  // 9~0
}


let arr = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]

for i in 0..&amp;lt;arr.count {
    print(arr[i])  // a, b, c
}

for i in arr {
    print(i)  // a, b, c
}

arr.forEach {
    print($0)  // a, b, c
}

Array(0..&amp;lt;arr.count).forEach {
    print(arr[$0])  // a, b, c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>pod install と pod update の違い</title>
      <link>https://kosukeblog.com/2018/04/podinstallandupdate/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2018/04/podinstallandupdate/</guid>
      <description>

&lt;p&gt;pod install と pod update それぞれの役割についてざっくり解説していきます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;pod-install&#34;&gt;pod install&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Podfile.lockをみて更新する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;pod-update&#34;&gt;pod update&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;SDKの今出ているバージョン（最新のブランチ）を見て、その差分があったらバージョンを更新する&lt;/li&gt;
&lt;li&gt;PodfileにSDKのバージョン指定をしているものは無視して、このバージョンから新しいのを使うなどといった指定がある場合には、そのSDKを更新する&lt;/li&gt;
&lt;li&gt;Podfile.lockが更新される（アップデートしたSDKのバージョンが更新される）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;pod-update-が終わらない方へアドバイス&#34;&gt;pod update が終わらない方へアドバイス&lt;/h4&gt;

&lt;p&gt;容量が大きいため pod update をしてもなかなか終わらない、、という方に&lt;br /&gt;
オススメなのが&lt;code&gt;outdated&lt;/code&gt; コマンドと &lt;code&gt;--verbose&lt;/code&gt; オプションです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;outdated&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;outdated&lt;/code&gt; コマンドを使うと、&lt;br /&gt;
現在使っているライブラリが古いバージョンかどうか分かります。&lt;br /&gt;
&lt;code&gt;pod update&lt;/code&gt; としてしまうと、全てのライブラリをアップデートしようとして&lt;br /&gt;
時間がかかるので、&lt;code&gt;outdated&lt;/code&gt; コマンドで古いライブラリがわかったら&lt;br /&gt;
&lt;code&gt;pod update 対象のLibrary名&lt;/code&gt; というように&lt;br /&gt;
特定のライブラリのみをアップデートするようにすると時間短縮になります。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;verbose&lt;/strong&gt;&lt;br /&gt;
アップデートに時間がかかってしまい、本当に動いているのかどうか&lt;br /&gt;
確認したいときは &lt;code&gt;pod update --verbose&lt;/code&gt; のように&lt;br /&gt;
&lt;code&gt;--verbose&lt;/code&gt;オプションを使うとアップデート中に更新している際の情報が表示されます。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;こちらの記事も合わせてどうぞ！&lt;br /&gt;
&lt;a href=&#34;https://kosukeblog.com/2017/04/cocoapods/&#34;&gt;CocoaPodsについて&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Xcodeデバッグ術まとめ</title>
      <link>https://kosukeblog.com/2018/02/debug/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2018/02/debug/</guid>
      <description>

&lt;p&gt;今回は個人的に便利だと思うデバッグの方法をまとめてみました！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;xcode-lldbコマンド&#34;&gt;Xcode lldbコマンド&lt;/h2&gt;

&lt;p&gt;ブレークポイントでプログラムを止めた際に、&lt;br /&gt;
コンソールに表示される (lldb) にコマンドを入力することができます。&lt;br /&gt;
これから紹介するコマンドを頭に入れておけば&lt;br /&gt;
素早くデバッグに取りかかることができるようになります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;p または print (プリミティブ型の変数の値を表示)&lt;/li&gt;
&lt;li&gt;po (オブジェクト型の変数の値の表示)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを知っておけば、値をちょこっと確認したい時に&lt;br /&gt;
わざわざコードにprint(~)を埋め込む必要がなくなり、&lt;br /&gt;
リアルタイムで値を見れます。&lt;/p&gt;

&lt;p&gt;また、以下のように式の評価を行うことが可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = 1
var b = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のようなプロパティがあったとします。&lt;br /&gt;
この時、aとbは同じ値かどうか知りたい場合にはlldbで以下のように入力してみると&lt;br /&gt;
デバッグ中に式の評価をすることが可能です。大変便利です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;p a == b&lt;/code&gt; -&amp;gt; falseが返ってくる&lt;br /&gt;
&lt;code&gt;p a == 1&lt;/code&gt; -&amp;gt; trueが返ってくる&lt;br /&gt;
&lt;code&gt;p b == 1&lt;/code&gt; -&amp;gt; falseが返ってくる&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;s (ステップイン)&lt;/li&gt;
&lt;li&gt;c (次のbreak point まで飛ばす)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一度入力した後は、入力し直さなくても&lt;br /&gt;
Enterボタンを押せばそのまま続けられるので便利です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;h (ヘルプ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使いたいコマンドを一覧表示することができます&lt;/p&gt;

&lt;p&gt;また、コマンドの中には&lt;br /&gt;
&lt;code&gt;br l&lt;/code&gt; でブレークポイントの一覧を表示してくれたりするものや&lt;br /&gt;
&lt;code&gt;q&lt;/code&gt; で終了させるものもあるので一度見てみるといいと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Top --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2510862598&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;filter&#34;&gt;Filter&lt;/h2&gt;

&lt;p&gt;デバッグエリアの下にあるFilterというプレースホルダーのところに&lt;br /&gt;
フィルタリングしたい文字を入力すると、デバッグで表示される全ての実行結果から&lt;br /&gt;
特定の文字のみで表示させることができるのでピンポイントで結果の値を見たい際に便利です。&lt;/p&gt;

&lt;p&gt;また、実行結果の中で &lt;code&gt;command + F&lt;/code&gt; でキーワード検索を行ってもよいですが、&lt;br /&gt;
ピンポイントでその部分だけみたい際にはこちらの方が圧倒的に便利です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;breakpoint&#34;&gt;Breakpoint&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Deactivate Breakpoints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全てのブレークポイント は &lt;code&gt;command + Y&lt;/code&gt; でオンオフできます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Edit Breakpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ブレークポイントを貼った部分から右クリックを押して &lt;code&gt;Edit Breakpoint...&lt;/code&gt; を選択します。&lt;br /&gt;
その後、Conditioinに条件を記入するとそのタイミングでブレークします。&lt;/p&gt;

&lt;p&gt;例えば下記のようなループの中のカウントがn回目になったときブレークしたい時に使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let arr = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]
for i in 0..&amp;lt;arr.count {
    print(arr[i])  // ここでブレークを貼り、i == 1 と設定すると i が 1 の時だけブレークになります。
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、逆にn回目はブレークをスルーしたい場合には、&lt;br /&gt;
ignore を設定してあげるとn回目にそこを通ったときはブレークをスルーしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exception breakpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ナビゲーターエリアの左下にある＋マーク(create a breakpoint) から
&lt;code&gt;Exception breakpoint...&lt;/code&gt; を選択しておけばクラッシュする直前でブレークしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;po $arg1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、&lt;code&gt;Exception breakpoint...&lt;/code&gt; を選択後に表示される設定の中の&lt;br /&gt;
Action から Debugger Command を選択し、&lt;code&gt;po $arg1&lt;/code&gt; を入力しておきます。&lt;br /&gt;
すると、ブレークすると同時にブレークの原因となるログを吐き出してくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;debug-view-hierarchy&#34;&gt;Debug View Hierarchy&lt;/h2&gt;

&lt;p&gt;Debug View Hierarchy は、今表示しているViewなどの階層を視覚的に見れる便利な方法です。&lt;/p&gt;

&lt;p&gt;表示の仕方は簡単で、デバッグ中に現れるデバッグエリアの上にあるボタンの中に&lt;br /&gt;
Debug View Hierarchy があるので、それを押すとXcode上で表示されます。&lt;br /&gt;
再開する際はブレークポイントで止まったのを再開させる時と同様に&lt;br /&gt;
Continue program execution を押します。&lt;/p&gt;

&lt;p&gt;階層表示中にクリックしたものがどのクラスのものか確認したり、&lt;br /&gt;
今の画面で一番上に表示しているViewは何Viewでその下のSubViewが&lt;br /&gt;
どうなっているのかなど、すぐに知りたい時に知れる便利な方法です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;built-in-identifiers&#34;&gt;Built-In Identifiers&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#file&lt;/code&gt;：ファイル名（String型）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#line&lt;/code&gt;：行数（Int型）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#column&lt;/code&gt;：文字の位置（Int型）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#function&lt;/code&gt;：関数名（String型）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;少しマイナーなデバッグ方法を紹介します。&lt;br /&gt;
これらを使い、関数などで呼ぶことで&lt;br /&gt;
その関数の行数やファイル名を表示させることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// 使い方

/// 怪しいと思う関数内でresult()を呼び出す
/// 今回は doSomething関数 が怪しいと思うので
/// ここでresult()を読んでみる。他にも怪しいと思う部分にresult()を入れる。
func doSomething() {
    /*
    何かしらの処理
        .
        .
        .
     */
    var errorMessage = &amp;quot;!!error message!!&amp;quot;
    result(message: errorMessage)  // 仮にここが50行目だとする
}


/// デバッグ用関数
/// 呼ばれた関数名がprintで表示される。
/// 今回は 50行目の doSomething() から呼ばれていることがわかった。
func result(message: String = &amp;quot;&amp;quot;, file: String = #function, line: Int = #line) {
    #if DEBUG
        print(&amp;quot;failed at \(function):\(line): \(message)&amp;quot;)
        // -&amp;gt; &amp;quot;failed at doSomething():50: !!error message!!&amp;quot;
    #endif
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://developer.apple.com/swift/blog/?id=15&#34;&gt;https://developer.apple.com/swift/blog/?id=15&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;debug-navigator&#34;&gt;Debug Navigator&lt;/h2&gt;

&lt;p&gt;デバッグ中にナビゲーターエリアの &lt;code&gt;Debug Navigator&lt;/code&gt; を押せば、&lt;br /&gt;
処理の様々な情報を見ることができます。(右から3つ目のアイコン(Xcode9にて))&lt;br /&gt;
ブレークポイントを貼っておき、ブレークで止まった際に&lt;br /&gt;
Debug Navigator を押すとその部分までの処理の流れをスレッドごとに&lt;br /&gt;
見ることができるので、大変便利だと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;よく使うものからマイナーなやり方までまとめてみました。&lt;br /&gt;
この記事を見つけて読んでくれた方が少しでも参考になったと思ってくれたら満足です :)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>viewWillAppearやviewDidAppearなどの状態まとめ</title>
      <link>https://kosukeblog.com/2017/12/lifecycle/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/12/lifecycle/</guid>
      <description>

&lt;p&gt;viewWillAppearの呼ばれるタイミングなど忘れることが多いので&lt;br /&gt;
簡易的ですが、覚え方も一緒にまとめてみました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;覚え方&#34;&gt;覚え方&lt;/h5&gt;

&lt;p&gt;例えば、View1 -&amp;gt; View2 にプッシュ遷移した場合、&lt;br /&gt;
View1 の上に View2 が重なっている。この時の状態は&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;View1&lt;/code&gt;: disappearになった&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;View2&lt;/code&gt;: appearになった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;なので以下のように覚えると楽です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;appear&lt;/code&gt;: 画面が見えてる状態&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disappear&lt;/code&gt;: 画面が見えなくなった状態&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Top --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2510862598&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;起動時&#34;&gt;起動時&lt;/h5&gt;

&lt;p&gt;1 &lt;code&gt;View1&lt;/code&gt;: &lt;strong&gt;viewDidLoad&lt;/strong&gt;&lt;br /&gt;
2 &lt;code&gt;View1&lt;/code&gt;: &lt;strong&gt;viewWillAppear&lt;/strong&gt;&lt;br /&gt;
3 &lt;code&gt;View1&lt;/code&gt;: &lt;strong&gt;viewDidAppear&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;view1-view2-遷移する&#34;&gt;View1 -&amp;gt; View2 遷移する&lt;/h5&gt;

&lt;p&gt;1 &lt;code&gt;View2&lt;/code&gt;: &lt;strong&gt;viewDidLoad&lt;/strong&gt;&lt;br /&gt;
2 &lt;code&gt;View1&lt;/code&gt;: &lt;strong&gt;viewWillDisappear&lt;/strong&gt;&lt;br /&gt;
3 &lt;code&gt;View2&lt;/code&gt;: &lt;strong&gt;viewWillAppear&lt;/strong&gt;&lt;br /&gt;
4 &lt;code&gt;View1&lt;/code&gt;: &lt;strong&gt;viewDidDisappear&lt;/strong&gt;&lt;br /&gt;
5 &lt;code&gt;View2&lt;/code&gt;: &lt;strong&gt;viewDidAppear&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;view2-view1-戻る-dismiss&#34;&gt;View2 -&amp;gt; View1 戻る (dismiss)&lt;/h5&gt;

&lt;p&gt;1 &lt;code&gt;View2&lt;/code&gt;: &lt;strong&gt;viewWillDisappear&lt;/strong&gt;&lt;br /&gt;
2 &lt;code&gt;View1&lt;/code&gt;: &lt;strong&gt;viewWillAppear&lt;/strong&gt;&lt;br /&gt;
3 &lt;code&gt;View2&lt;/code&gt;: &lt;strong&gt;viewDidDisappear&lt;/strong&gt;&lt;br /&gt;
4 &lt;code&gt;View1&lt;/code&gt;: &lt;strong&gt;viewDidAppear&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Equatableについて</title>
      <link>https://kosukeblog.com/2017/11/equatable/</link>
      <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/11/equatable/</guid>
      <description>

&lt;h2 id=&#34;equatable&#34;&gt;Equatable&lt;/h2&gt;

&lt;p&gt;Equatableプロトコルに準拠したクラスは&lt;br /&gt;
&lt;code&gt;static func ==(lhs: Self, rhs: Self) -&amp;gt; Bool&lt;/code&gt; 関数を実装する必要があり、&lt;br /&gt;
何によって等しいかをこの中で定義してあげることで比較ができるようになります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;EquatableSample.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;class IntegerRef: Equatable {
    let value: Int
    init(_ value: Int) {
        self.value = value
    }

    static func == (lhs: IntegerRef, rhs: IntegerRef) -&amp;gt; Bool {
        return lhs.value == rhs.value
    }
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://developer.apple.com/documentation/swift/equatable&#34;&gt;https://developer.apple.com/documentation/swift/equatable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これにより、&lt;code&gt;IntegerRef(10) == IntegerRef(10)&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; となります。&lt;br /&gt;
よって、以下のようなテストコードは通るようになります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;EquatableSampleTests.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;func testEquality() {
    XCTAssertTrue(IntegerRef(10) == IntegerRef(10))
    XCTAssertFalse(IntegerRef(10) == IntegerRef(11))
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;どう使うのか&#34;&gt;どう使うのか&lt;/h3&gt;

&lt;p&gt;自作クラスのArrayもEquatableプロトコルに準拠していれば&lt;code&gt;contains()&lt;/code&gt; を用いた際に、&lt;br /&gt;
配列の中に指定したオブジェクトが存在しているかを確認できます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;上記の例を用いて、書くとこのようになります。&lt;/p&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;EquatableSample.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;let array = [IntegerRef(10), IntegerRef(11), IntegerRef(12)]

array.contains(IntegerRef(10))  // =&amp;gt; true
array.contains(IntegerRef(13))  // =&amp;gt; false&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;さらに便利に使う&#34;&gt;さらに便利に使う&lt;/h3&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;EquatableSample.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;/// 重複した要素を削除するArray型の拡張
extension Array where Element: Equatable {
    var unique: [Element] {
        return reduce([], {
            $0.contains($1) ? $0 : $0 &amp;#43; [$1]
        })
    }
}

let array = [IntegerRef(10), IntegerRef(11), IntegerRef(12), IntegerRef(11)]
print(array)  // [IntegerRef(10), IntegerRef(11), IntegerRef(12), IntegerRef(11)]
print(array.unique)  // [IntegerRef(10), IntegerRef(11), IntegerRef(12)]&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;上記のようにArrayを拡張してあげれば、配列の重複を防ぐことが可能になります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>GCD(Grand Central Dispatch)についてまとめ</title>
      <link>https://kosukeblog.com/2017/10/gcd/</link>
      <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/10/gcd/</guid>
      <description>

&lt;h2 id=&#34;gcd&#34;&gt;GCD&lt;/h2&gt;

&lt;p&gt;マルチスレッドを簡単に処理してくれる &lt;strong&gt;GCD&lt;/strong&gt; (Grand Central Dispatch) についてまとめてみました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;気をつける点-しないように心がける点&#34;&gt;気をつける点（しないように心がける点）&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;データ競合&lt;/strong&gt;&lt;br /&gt;
複数のスレッドから同じリソースを更新しようとしてデータの不整合が発生する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;デッドロック&lt;/strong&gt;&lt;br /&gt;
イベントを待つためのスレッドを停止する仕組みにより複数のスレッドが相互に待ち続ける&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;多数のスレッドを使用しすぎて大量のメモリを消費する&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Top --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2510862598&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;キューの種類&#34;&gt;キューの種類&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Serial Dispatch Queue&lt;/code&gt;：1つのスレッドに追加された順番に処理を実装する&lt;br /&gt;
→ 競合を起こしそうな場合は安全に用いる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Concurrent Dispatch Queue&lt;/code&gt;：複数のスレッドを使って追加された処理を実行する&lt;br /&gt;
→ 起こさない処理は平行に用いる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;例えばDBから値を取得して、それを渡すときは &lt;strong&gt;Serial Dispatch Queue&lt;/strong&gt; を&lt;br /&gt;
1つのデータにつき1つ複数のスレッドを生成して処理を実行させるとよい。&lt;/p&gt;

&lt;p&gt;ちなみに&amp;hellip;&lt;/p&gt;

&lt;p&gt;Main Dispatch Queue はメインスレッドが1つしかないので &lt;strong&gt;Serial Dispatch Queue&lt;/strong&gt; になり、&lt;br /&gt;
Global Dispatch Queue はアプリケーション全体から使用できる &lt;strong&gt;Concurrent Dispatch Queue&lt;/strong&gt; である。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;スレッド処理の順番&#34;&gt;スレッド処理の順番&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Serial&lt;/code&gt;：処理の順番は実行させてからなので順番&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Concurrent&lt;/code&gt;：一度に複数の処理を行うためバラバラ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;複数のキューからデータを更新する場合は、競合が起きる可能性があるので&lt;strong&gt;serial&lt;/strong&gt;キューを使用すべき。&lt;br /&gt;
また、いくつもの&lt;strong&gt;serial&lt;/strong&gt;キューを作って平行に処理させるのは良いが、&lt;br /&gt;
多すぎるとメモリ上の問題に直面してしまうので必要な数だけ作るべき。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;dispatch-group&#34;&gt;Dispatch Group&lt;/h4&gt;

&lt;p&gt;Dispatch Queue に追加した複数の処理が全て終了したときに終了処理を行いたいときに使用する。&lt;br /&gt;
どんな Dispatch Queue に処理が追加されていても、それら全てが終了するまで監視することができ、&lt;br /&gt;
全ての処理の実行終了を検知したら &lt;strong&gt;Dispatch Queue&lt;/strong&gt; に終了処理を追加することができるのが一番の利点である。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;同期と非同期&#34;&gt;同期と非同期&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dispatch_async&lt;/code&gt;：非同期&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;dispatch_sync&lt;/code&gt;：同期（その処理が終わるまで待つ）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;様々な処理&#34;&gt;様々な処理&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_after&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;〜秒後に処理を Dispatch Queue に追加します。&lt;br /&gt;
〜秒後に処理を実行するではなく Dispatch Queue に Block を追加するという意味なので注意しましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_barrier_async&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指定した場所までに Concurrent Dispatch Queue に追加された&lt;br /&gt;
並列に実行されているすべての処理の実行が終了してから&lt;br /&gt;
指定された処理をその Concurrent Dispatch Queue に追加する。&lt;br /&gt;
そして、&lt;strong&gt;dispatch_barrier_async&lt;/strong&gt; 関数によって追加された処理の実行が終了したら&lt;br /&gt;
通常の Concurrent Dispatch Queue の動作に戻り、&lt;br /&gt;
その Concurrent Dispatch Queue に追加されていた処理をまた並列に実行し始めることができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;例えば、読み込み処理は Concurrent Dispatch Queue で行いたいが、&lt;br /&gt;
その途中で書き出しをしようとすると、読み込んだ後でないといけない。そんな場合に使用します。&lt;/p&gt;

&lt;p&gt;使い方としては、dispatch_async 関数の代わりに&lt;br /&gt;
&lt;strong&gt;dispatch_barrier_async&lt;/strong&gt; 関数を使用するだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;例
dispatch_async(queue, reading01)
dispatch_async(queue, reading02)
dispatch_async(queue, reading03)
dispatch_barrier_async(queue, writing)
dispatch_async(queue, reading04)
dispatch_async(queue, reading05)
　　　　　　　　　　・
　　　　　　　　　　・
　　　　　　　　　　・
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これによって効率のよいデータベースアクセスやファイルアクセスを実装することができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_apply&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dispatch_sync関数やDispatch Groupに関連するAPI。&lt;br /&gt;
この関数は、指定した回数分、指定したBlockを指定した Dispatch Queue に追加し、&lt;br /&gt;
それら全ての処理を実行が終了するまで待つAPIである。&lt;br /&gt;
注意すべき点としては、dispatch_sync 関数と同様に処理の実行終了を待ってしまうので&lt;br /&gt;
dispatch_async 関数で非同期実行しながら使いましょう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_suspend と dispatch_resume&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;dispatch_suspend&lt;/strong&gt; は Dispatch Queue には追加されているが&lt;br /&gt;
まだ実行されていない処理をこれ以降一切実行させないときに用いる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dispatch_resume&lt;/strong&gt; は実行させるようにする際に用いる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_semaphore&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;並列に実行される処理によってデータ更新をする場合データの不整合やアプリケーションの不正終了が起こるときがあり、&lt;br /&gt;
それを回避するために Serial Dispatch Queue や dispatch_barrier_async 関数を使うことで回避できるが、&lt;br /&gt;
より粒度の細かな排他制御を行う際に用いります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dispatch_once&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指定した処理をアプリケーション実行中に一度だけしか実行されないことを証明するためのAPI。&lt;br /&gt;
マルチスレッド環境下でも、完全に安全であることが証明される。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dispatch I/O&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大きなファイルを読み込む際に、Global Dispatch Queue を使ってファイルを適度な大きさに分割して&lt;br /&gt;
平行に読むことで速く読み込めないかという際に用いる。&lt;br /&gt;
複数スレッドを使って複数並列に読み込むのが速いときもあり、&lt;br /&gt;
それを実現するのが &lt;strong&gt;Dispatch I/O&lt;/strong&gt; と &lt;strong&gt;Dispatch Data&lt;/strong&gt; である。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dispatch Source&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「kqueue」のラッパーで、Foundationフレームワークを使用するだけで使用可能（GCDの恩恵を受けられる）。&lt;/p&gt;

&lt;p&gt;例えば、DISPATCH_SOURCE_TYPE_TIMERなどを用いればネットワークプログラミングでの通信タイムアウトなどに使用できる。&lt;br /&gt;
また、Dispatch Queue では処理を追加したらキャンセルはできないが、&lt;br /&gt;
この Dispatch Queue ではキャンセルすることが可能である。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;参考書籍&#34;&gt;参考書籍&lt;/h4&gt;

&lt;p&gt;ちなみに ARCやBlocks、GCD周りはこちらの書籍が大変わかりやすく載っているのでオススメです。&lt;br /&gt;
今回の記事もこちらを参考にしました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://rcm-fe.amazon-adsystem.com/e/cm?ref=tf_til&amp;t=kosukeblog06-22&amp;m=amazon&amp;o=9&amp;p=8&amp;l=as1&amp;IS2=1&amp;detail=1&amp;asins=4844331094&amp;linkId=e4b3d393321b376cead38ec70bfa215a&amp;bc1=000000&amp;lt1=_blank&amp;fc1=4a4a4a&amp;lc1=349ef3&amp;bg1=ffffff&amp;f=ifr&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Swiftメインでコード書いてる方からすれば、今更Objective-Cの書籍？ってなりますが、&lt;br /&gt;
GCDなどについて理解を深めたい方にはもってこいの一冊なので一度参考にしてみてはいかがでしょうか。&lt;br /&gt;
今ならAmazonだとロープライス300円くらいで手に入るのでオススメです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Abstract Factory パターンについて</title>
      <link>https://kosukeblog.com/2017/09/abstractfactory/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/09/abstractfactory/</guid>
      <description>

&lt;h2 id=&#34;abstract-factory-パターンとは&#34;&gt;Abstract Factory パターンとは&lt;/h2&gt;

&lt;p&gt;デザインパターンの1つで、関連するオブジェクトの生成を行うクラスを抽象的にして、生成を行うためのインターフェースを提供する。&lt;/p&gt;

&lt;p&gt;インスタンスを生成するためのAPIを集約することにより、情報隠蔽や複数のモジュールの再利用を効率よく行うことが可能になる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;実装例&#34;&gt;実装例&lt;/h3&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;AbstractFactoryPattern.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;import UIKit



/// Abstract Factory パターン ----------------------------------------

/// Productクラス（製品）
protocol Doll {
    func sayHallo()
}

/// Creatorクラス（工場）
protocol Factory {
    func createInstance() -&amp;gt; Doll
}

/// ConcreteProductクラス（Japanese製品）
class JapaneseDoll: Doll {
    func sayHallo() {
        print(&amp;#34;こんにちは&amp;#34;)
    }
}

/// ConcreteProductクラス（America製品）
class AmericanDoll: Doll {
    func sayHallo() {
        print(&amp;#34;Hallo&amp;#34;)
    }
}

/// ConcreteCreatorクラス（Chinese製品）
class ChineseDoll: Doll {
    func sayHallo() {
        print(&amp;#34;你好&amp;#34;)
    }
}

/// Abstract Factory（XXのConcreteCreatorクラス（XX製品を作るXX工場）を作るFactoryメソッド）
enum Country {
    case Japan
    case America
    case China
}

enum DollFactory {
    static func create(from country: Country) -&amp;gt; Doll {
        switch country {
        case .Japan:
            return JapaneseDoll()
        case .America:
            return AmericanDoll()
        case .China:
            return ChineseDoll()
        }
    }
}



/// 呼び出す ------------------------------------------------------------

class ViewController: UIViewController {
    
    var doll: Doll { return DollFactory.create(from: .Japan) }  // 例えば .Japan を .America に変えるだけでAmericanDollのインスタンスが生成できる
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doll.sayHallo()
    }
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Abstract FactoryでDollオブジェクトをインスタンス化する役割を持つ。&lt;br /&gt;
そのため、呼び出し側で生成されるインスタンスのことを意識しなくて済む（状況が変わっても修正箇所は微量且つ呼び出す側のコードに影響がない）&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Swift プロトコル、デリゲートについて理解する</title>
      <link>https://kosukeblog.com/2017/09/protocol/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/09/protocol/</guid>
      <description>

&lt;p&gt;プロトコルやデリゲートの使い方などの基礎を初心にかえって勉強し直してみました。&lt;br /&gt;
Swiftのプロトコルは、Javaでいうインターフェースのことです。&lt;br /&gt;
Swiftのプロトコルだけで学ぼうとすると、少々わかりづらいかもしれないので、&lt;br /&gt;
Javaのインターフェースを先に調べてみてからだと、より理解しやすいかと思います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;また、本記事ではステップごとに分けて実際のプログラムで解説してきます。&lt;br /&gt;
&lt;del&gt;決して手抜き解説なわけではありません。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Top --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2510862598&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;step-1-1&#34;&gt;Step 1-1&lt;/h5&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;Step1_1.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;import Foundation

/// クラスがカートを持つ上で、カートに必要な要素をここで定義する
/// ちなみにプロトコルはただのお約束という意味なので
/// 必ずしもDelegateと名付ける必要はない
protocol KartDelegate {
    func setPerformance()  // 性能
    func setColor()  // 車の色
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;h5 id=&#34;step-1-2&#34;&gt;Step 1-2&lt;/h5&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;Step1_2.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;import Foundation

/// カートプロトコル
protocol KartDelegate {
    func setPerformance()  // 性能
    func setColor()  // 車の色
}

/// マリオクラスがカートを持つ
class Mario: KartDelegate {
    
    /// カートを持ったクラスは、そのカートプロトコルの中で定義した抽象メソッドを
    /// 必ず実装（implements）してあげる必要がある
    func setPerformance() {
        print(&amp;#34;☆☆☆☆☆&amp;#34;)
    }
    func setColor() {
        print(&amp;#34;Red&amp;#34;)
    }
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;h5 id=&#34;step-1-3&#34;&gt;Step 1-3&lt;/h5&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;Step1_3.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;import Foundation

/// クラスがカートを持つ上で、カートに必要な要素をここで定義する
protocol KartDelegate {
    func setPerformance()  // 性能
    func setColor()  // 車の色
}

/// マリオクラス
class Mario {
    /// どんなカートを持つかわからないがKartDelegateのプロパティを持つ
    var delegate: KartDelegate?
    
    func myKart() {
        /// まだどんなカートを持っているかわからないがここで呼び出してみる
        delegate?.setPerformance()
        delegate?.setColor()
    }
}

/// ルイージクラス
class Luigi: KartDelegate {
    
    func setPerformance() {
        print(&amp;#34;☆☆&amp;#34;)
    }
    func setColor() {
        print(&amp;#34;Green&amp;#34;)
    }
}

/// クラスのインスタンスを作る
let mario = Mario()
let luigi = Luigi()
/// ここでマリオがdelegateを通じてルイージのカートを持つ
mario.delegate = luigi
mario.myKart()  // ☆☆ Green&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;実際に使用する例&#34;&gt;実際に使用する例&lt;/h3&gt;

&lt;p&gt;iOSアプリを開発している方で、tabelViewやtextFieldなどを利用する際に&lt;br /&gt;
どこかの記事の通り書いて、知らぬ間にクラスに&lt;code&gt;~~~Delegate&lt;/code&gt;を継承して、
プロトコルの関数を使用していた、、なんて経験があるかもしれません。&lt;/p&gt;

&lt;p&gt;ここまででプロトコル等について理解できてきたなら&lt;br /&gt;
下記の例を見れば、より理解が深まるかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;step-2-1&#34;&gt;Step 2-1&lt;/h5&gt;

&lt;p&gt;
  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;Step2_1.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;import UIKit

class ViewController: UIViewController, UITextFieldDelegate {  // UITextFieldDelegateのプロトコルを継承する
    
    @IBOutlet weak var textField: UITextField!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        textField.delegate = self  // command &amp;#43; クリック で delegate の中身を見ると
                                   // weak open var delegate: UITextFieldDelegate? が定義されているのがわかる。
                                   // また、このクラス内でプロトコルの関数の中身の実装をしており、
                                   // その関数を扱いたいため self をデリゲートに指定してある。
                                   // ちなみに、定義元が optional public func ~~ のように optional が付いているものは
                                   // 必ずしもプロトコルの関数を実装（implements）する必要はない。
    }
    
    /// デリゲートをselfにしてあるので、この中にUITextFieldDelegateの関数を記述する
    /// Returnボタン後にキーボードを閉じる
    func textFieldShouldReturn(_ textField: UITextField) -&amp;gt; Bool {
        textField.resignFirstResponder()
        return true
    }
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;h5 id=&#34;step-2-2&#34;&gt;Step 2-2&lt;/h5&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight swift&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;Step2_2.swift&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;swift code-highlight&#34;&gt;/// このように外でUITextFieldDelegateを継承して、実装したプロトコルの関数を
/// デリゲートで指定してあげればViewControllerで使うこともできる。
/// しかし、この方法を用いる場合はクラスのインスタンスが破棄されると扱えなくなるので注意が必要です。

import UIKit

class ViewController: UIViewController {
    
    @IBOutlet weak var textField: UITextField!
    let vc2 = ViewController2()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        textField.delegate = vc2
    }
}

class ViewController2: UIViewController, UITextFieldDelegate {
    /// Returnボタン後にキーボードを閉じる
    func textFieldShouldReturn(_ textField: UITextField) -&amp;gt; Bool {
        textField.resignFirstResponder()
        return true
    }
}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;コードを書く際に、まず動かそうと真似て書いて、&lt;br /&gt;
なんとなく理解した気になっていたことが度々ありましたが、&lt;br /&gt;
こうして改めてステップごとにわけて書いてみると自分でもより理解を深めることができました。:)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>CocoaPodsについて</title>
      <link>https://kosukeblog.com/2017/04/cocoapods/</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/04/cocoapods/</guid>
      <description>

&lt;h2 id=&#34;cocoapods-https-cocoapods-org&#34;&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;オープンソースなどのライブラリを使用した際にバージョン管理を行うことができるiOSライブラリ管理ツール&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;インストール&#34;&gt;インストール&lt;/h5&gt;

&lt;p&gt;CocoaPods をインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;podfileの生成&#34;&gt;Podfileの生成&lt;/h5&gt;

&lt;p&gt;Podfile が入ってない場合は、一番最初に使用したいディレクトリで以下のコマンドを入力するとPodfileが生成される
（この中にライブラリなどを追加していく）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;workspace等の生成&#34;&gt;Workspace等の生成&lt;/h5&gt;

&lt;p&gt;pod install を行うとその中に以下のファイル等が生成される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリ名.xcworkspace&lt;/li&gt;
&lt;li&gt;Podfile.lock&lt;/li&gt;
&lt;li&gt;Podsフォルダ&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;podのバージョンを更新する&#34;&gt;podのバージョンを更新する&lt;/h5&gt;

&lt;p&gt;podのバージョンをあげる際に以下のコマンドを使用する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;編集&#34;&gt;編集&lt;/h5&gt;

&lt;p&gt;バージョンの書き換えなどを行う際に使用する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi Podfile
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert danger &#34;&gt;
  &lt;p&gt;最後に &lt;strong&gt;pod install&lt;/strong&gt; をしないと反映されないので注意&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;ファイル内の確認&#34;&gt;ファイル内の確認&lt;/h5&gt;

&lt;p&gt;podファイルの中を確認する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat Podfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;古いバージョンの検出&#34;&gt;古いバージョンの検出&lt;/h5&gt;

&lt;p&gt;使用しているライブラリの中から古いバージョンを検出してくれる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod outbated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;コマンドのヘルプ&#34;&gt;コマンドのヘルプ&lt;/h5&gt;

&lt;p&gt;コマンドを忘れた際に使用する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;使用する際には アプリ名.xcworkspace を開いて、その中に使うライブラリのインポート行う必要があります。&lt;/p&gt;

&lt;p&gt;また、多数のライブラリ等がまとまった &lt;a href=&#34;https://github.com/matteocrippa/awesome-swift&#34;&gt;Awesome Swift&lt;/a&gt; はおすすめです。&lt;br /&gt;
ここから使いたいものを探してみるといいかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>