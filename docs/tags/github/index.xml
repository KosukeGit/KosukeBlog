<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Kosuke Blog</title>
    <link>https://kosukeblog.com/tags/github/index.xml</link>
    <description>Recent content in Github on Kosuke Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://kosukeblog.com/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Developer Enterprise Program を使ってアプリ配布したときのまとめ</title>
      <link>https://kosukeblog.com/2017/08/inhouse/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/08/inhouse/</guid>
      <description>

&lt;p&gt;本記事は、In-House形式によるiOSアプリの配布方法です。&lt;br /&gt;
ダウンロードできるデバイスをこちらで登録する必要なく、台数無制限でアプリを入れることが可能です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Top --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2510862598&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;developer-enterprise-program-配布までの流れ&#34;&gt;Developer Enterprise Program 配布までの流れ&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;①-archives&#34;&gt;① Archives&lt;/h5&gt;

&lt;p&gt;端末を Generic iOS Device にして &lt;code&gt;Product&lt;/code&gt; -&amp;gt; &lt;code&gt;Archives&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;②-ipaファイルの生成&#34;&gt;② ipaファイルの生成&lt;/h5&gt;

&lt;p&gt;Export で ipa ファイルを作る&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリの名前（Xcode側で設定したアイコン名はアプリをインストールしている時に表示される時に表示される名前）&lt;/li&gt;
&lt;li&gt;ダウンロードページからダウンロードを押した時にダウンロードされるipaファイルのURL&lt;br /&gt;
例: &lt;code&gt;https://ダウンロードページ/アプリ名.ipa&lt;/code&gt;&lt;br /&gt;
（plistファイルからこのURLを参照してダウンロードさせるのに使用）&lt;/li&gt;
&lt;li&gt;image URL ×2 (大小)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;具体例は下記に記載してある &lt;em&gt;GitHubでダウンロードページを動かす&lt;/em&gt; を参照&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/jp/documentation/IDEs/Conceptual/AppDistributionGuide/DistributingEnterpriseProgramApps/DistributingEnterpriseProgramApps.html&#34;&gt;参考URL - Apple公式ページ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;③-ダウンロードページを作る&#34;&gt;③ ダウンロードページを作る&lt;/h5&gt;

&lt;p&gt;ダウンロードボタンを押したときに手順2で生成されるplistファイルをここで読みこませる&lt;br /&gt;
例: &lt;code&gt;https://ダウンロードページ/manifest.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;例: ダウンロードページのHTML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;ダウンロードページ&amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

    &amp;lt;h1&amp;gt;ダウンロード&amp;lt;/h1&amp;gt;

    &amp;lt;img src=&amp;quot;./image/icon512.png&amp;quot; alt=&amp;quot;アプリアイコン&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;下のボタンからアプリをダウンロードしてください。&amp;lt;/p&amp;gt;

    &amp;lt;a href=&amp;quot;itms-services://?action=download-manifest&amp;amp;url=manifest.plistが置いてあるURL&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;ダウンロード&amp;lt;/a&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Export時に&lt;code&gt;ipaファイル&lt;/code&gt;と&lt;code&gt;plistファイル&lt;/code&gt;が生成されるため、&lt;br /&gt;
&lt;code&gt;itms-services://?action=download-manifest&amp;amp;url=&lt;/code&gt;の後に&lt;br /&gt;
生成したplistファイルの置いてあるURLを指定します。&lt;/p&gt;

&lt;p&gt;例: &lt;code&gt;&amp;lt;a href=&amp;quot;itms-services://?action=download-manifest&amp;amp;url=https://ユーザ名.github.io/アプリ名/download/apps/v1_0_0/manifest.plist&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;ダウンロード&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;githubでダウンロードページを動かす&#34;&gt;GitHubでダウンロードページを動かす&lt;/h5&gt;

&lt;p&gt;ページにアクセスできるようにするための具体例として、&lt;br /&gt;
GitHubでダウンロードする静的ページを作り、
同一階層にipa, plistファイルを置くという方法があります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;例: GitHub構成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;アプリ名 - download  / - apps  /  v1_0_0  /  - アプリ名.ipa
                                           - manifest.plist
                     - image /  - icon512.png
                                - icon57.png
                     - index.html
                     - style.css
       - README.md
       - .gitignore
       - LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リポジトリ内をこのようなファイル構成にしておき、&lt;br /&gt;
githubで静的サイトを作り、  URLを生成すると&lt;br /&gt;
XcodeでExportする際に必要なURLが以下のようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://ユーザ名.github.io/アプリ名/download/apps/v1_0_0/アプリ名.ipa&lt;/li&gt;
&lt;li&gt;https://ユーザ名.github.io/アプリ名/download/image/icon57.png&lt;/li&gt;
&lt;li&gt;https://ユーザ名.github.io/アプリ名/download/image/icon512.png&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これであとは、手持ちの端末からサイトにアクセスして&lt;br /&gt;
&lt;code&gt;ダウンロード完了&lt;/code&gt; -&amp;gt; &lt;code&gt;設定&lt;/code&gt; -&amp;gt; &lt;code&gt;プロファイルとデバイス管理&lt;/code&gt; を選択し、&lt;br /&gt;
エンタープライズAPPにある項目から該当するアプリ開発者を選び、&lt;code&gt;信頼&lt;/code&gt;を選択する。&lt;br /&gt;
これで、利用できるようになります。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Xcode空白の設定 &#43; 小ネタ</title>
      <link>https://kosukeblog.com/2017/06/whitespace/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/06/whitespace/</guid>
      <description>

&lt;h2 id=&#34;xcodeで空白の設定をする-小ネタ&#34;&gt;Xcodeで空白の設定をする + 小ネタ&lt;/h2&gt;

&lt;p&gt;Info.plistをコードの状態にして一部修正を加えた際、空白の種類が異なってしまっていたのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Xcode -&amp;gt; Preferences&amp;hellip; -&amp;gt; Text Editing を選択&lt;br /&gt;
その中にある項目の Indentation の Prefer indent using を押すと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spaces&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tabs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の２種類が選択できる。&lt;/p&gt;

&lt;p&gt;上記の2種類からどちらかで統一し、文字をコピペし直すと自動的に空白を指定した方の設定で補ってくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;空白を目で確認する方法&#34;&gt;空白を目で確認する方法&lt;/h5&gt;

&lt;p&gt;Xcodeの上のメニューから &lt;code&gt;Editor&lt;/code&gt; -&amp;gt; &lt;code&gt;Show Invisibles&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;小ネタ&#34;&gt;小ネタ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;?w=1&lt;/code&gt;をGitHubのリンクの後ろに付けると空白の差分を除いた状態になるためレビューしやすくなります！試して見てください:)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>gitignoreについて</title>
      <link>https://kosukeblog.com/2017/05/gitignore/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/05/gitignore/</guid>
      <description>

&lt;h2 id=&#34;gitignore-とは&#34;&gt;.gitignore とは&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;ignore = 無視する&amp;rdquo;という意味の通り、Gitのバージョン管理の対象から外すファイル（＝無視するファイル）を .gitignore に書いておき、その設定ファイルをルートディレクトリに置いておくことで git add . などを行ったときでもそのファイルだけ自動で無視をするようになります。そのため、間違えてプッシュしてしまったといったことを回避することができます。&lt;/p&gt;

&lt;h3 id=&#34;生成の仕方&#34;&gt;生成の仕方&lt;/h3&gt;

&lt;p&gt;ターミナルで vim .gitignore を打つことによって .gitignore が生成され、vim が立ち上がります。i コマンドで insertモードに切り替え、中に対象のファイルを書き込んでいきます。（書き方については後述します）その後、escキーを押して :wq で保存&amp;amp;終了を行います。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Middle --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2239399852&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;書き方&#34;&gt;書き方&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\#&lt;/code&gt;：&lt;strong&gt;コメント&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;*.ipa&lt;/code&gt;：&lt;strong&gt;その拡張子はすべて無視したいとき&lt;/strong&gt;&lt;br /&gt;
→ .ipa のつく拡張子はすべて無視する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/test&lt;/code&gt;：&lt;strong&gt;このファイルの全てを無視する&lt;/strong&gt;&lt;br /&gt;
→ 末尾に / がない場合は test と test 以下のファイル or ディレクトリを無視する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;test/&lt;/code&gt;：&lt;strong&gt;その名前のディレクトリ全て無視される&lt;/strong&gt;&lt;br /&gt;
→ ルートディレクトリとそのサブディレクトリ内の test というディレクトリ名全てを無視する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;~~/~~/test/（~~/~~/test）&lt;/code&gt;：&lt;strong&gt;そのファイル or ディレクトリのみ無視する&lt;/strong&gt;&lt;br /&gt;
→ 最初と最後が / の時はそのファイル or ディレクトリのみを指定して無視する。この場合は test のみを無視する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;!/~~/~~/test.text&lt;/code&gt;：&lt;strong&gt;無視するのを無効にする&lt;/strong&gt;（＝そのファイルは無視しない）&lt;br /&gt;
→ 例えば * で書いてあるとき、その中の test.text は無視したくないときに使用する。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;他にも書き方がありますが、とりあえずはこのあたりを押さえておくといいと思います。
また、実際に使用する際には&lt;strong&gt;&lt;a href=&#34;https://github.com/github/gitignore&#34;&gt;ここ&lt;/a&gt;&lt;/strong&gt;から対象のもの（例えば Swift で書いているのであれば Swift.gitignore ）を見るなどして参考にするとよいと思います。&lt;br /&gt;
初めは、そのファイル自体をクローンしてリネーム（.gitignore に変更）してルートディレクトリ直下に入れておけばコンフリクトなどの回避をすることができます。
ちなみにリネームする際はターミナルから行います。（Swift.gitignore  から .gitignore  にリネームする時：&lt;code&gt;mv Swift.gitignore .gitignore&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;また、隠しフォルダをファインダーで開く際は、&lt;code&gt;command + shift + .&lt;/code&gt; で見ることが可能です！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;補足&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;GitHub上から .gitignore の設定を行う場合&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new repository で新しいリポジトリの作成時に下の方に&lt;code&gt;Add  .gitignore: None&lt;/code&gt;となっているところがあるので、そこを押して使用する言語のものを選択すれば自動で生成してくれます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Gitのコマンド名を自分で設定する</title>
      <link>https://kosukeblog.com/2017/05/command/</link>
      <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/05/command/</guid>
      <description>

&lt;p&gt;Gitコマンドが長くて打つのが大変、毎回調べなきゃいけない&amp;hellip; そんなときに以下のような設定をすることによってGitのショートカットコマンドを作成することができます！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--global&lt;/code&gt; にすることで現在のユーザーを対象にした設定をすることができます。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;エイリアス設定&#34;&gt;エイリアス設定&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.省略したいコマンド &#39;実際のコマンド&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;例：git config --global alias.st &#39;status&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;実行時&#34;&gt;実行時&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git st
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで git status した時と同じ動作をするようになります&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;設定したエイリアス一覧表示&#34;&gt;設定したエイリアス一覧表示&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config --global --list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;設定したコマンドを削除&#34;&gt;設定したコマンドを削除&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config --global --unset alias.st
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで  git st コマンドが削除されます&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;ヘルプ表示&#34;&gt;ヘルプ表示&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git config help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;参考URLは&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Middle --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;2239399852&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;おまけ&#34;&gt;おまけ&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;今日何をしたか振り返り-１２時間前からのログ表示&#34;&gt;今日何をしたか振り返り（１２時間前からのログ表示）&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git today
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドで今日どんなコミットをしたか等振り返ることができます。&lt;/p&gt;

&lt;p&gt;設定する際はこちら↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.today &amp;quot;log --oneline --since=&#39;12 hours ago&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;ログをグラフで表示&#34;&gt;ログをグラフで表示&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git mylog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ターミナルでログをグラフにして確認する際に便利です。&lt;/p&gt;

&lt;p&gt;設定する際はこちら↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.mylog &#39;log --oneline --graph --decorate&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これでよく使うコマンドや長いコマンドの入力が楽になります。
何を設定したか確認したい時は、&lt;code&gt;--list&lt;/code&gt;を使いましょう！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;こちらの記事も合わせてどうぞ！&lt;/p&gt;

&lt;p&gt;→ &lt;a href=&#34;https://kosukeblog.com/2017/04/completion/&#34;&gt;tabキーでGitのコマンドを補完する&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>GitHubの２段階認証後にpushできなくなった時の対処法</title>
      <link>https://kosukeblog.com/2017/05/authentication/</link>
      <pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kosukeblog.com/2017/05/authentication/</guid>
      <description>&lt;p&gt;今回は、GitHubで２段階認証を行ったが、その後のpushができなくなってしまった際の対応方法について書いていきたいと思います。&lt;/p&gt;

&lt;p&gt;下記の様にプッシュ後にユーザ名とパスワードを求められて、入力すると&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fatal: Authentication failed for &#39;https://github.com/~~~&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;と出力されてしまいました。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;この対応方法は、アクセストークンを生成する必要があります。
公式ページに従って手順通りに行えば解決できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/&#34;&gt;Creating a token&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まず、上記のURLの手順に従ってアクセストークンを発行します。
このアクセストークンはどこかにメモをしておきましょう。&lt;/p&gt;

&lt;p&gt;そして、ユーザ名とパスワードを入力する際のパスワードに先ほどのアクセストークンを入れて進めることでプッシュすることができます。&lt;/p&gt;

&lt;p&gt;ちなみに、キーチェーン等の確認をする際はこちらを参考にすると良いです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/updating-credentials-from-the-osx-keychain/&#34;&gt;Updating your credentials via Keychain Access&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- BlogAdsense_Bottom --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-9828180917254396&#34;
     data-ad-slot=&#34;9212002313&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>